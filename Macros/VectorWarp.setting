--[[-- 
https://emiliosapia.myportfolio.com
Written by : Emilio Sapia, Alexey Bogomolov
Last Update : Jan, 2024
version 2.9

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]--

{
	Tools = ordered() {
		VectorWarp = MacroOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				},
			},
			Inputs = ordered() {
				CommentsNest = Input { Value = 0, },
				File = Input { Value = "comp:VectorWarp\\render001.0000.exr", },
				Guide = Input { Value = [[
QUICK GUIDE:
1. Connect the image to the VectorWarp input.
2. Generate CleanPass STMaps. This process will create a series of clean STMap files for further processing.
	- By default, the STMap will be rendered to the comp:VectorWarp folder.
	- To specify a different STMap location, navigate to the file tab and set the Saver path accordingly.
	There are two options for creating CleanPass STMap:
		a. Generate CleanPass (fast): Renders one frame and copies the rest. This is usually the preferred option.
		Note: For accurate and fast CleanPass generation, ensure the path to the STMaps does not contain non-Latin symbols.
		If non-Latin words are required in your paths, either install the provided `win125x.lua` module in the `Modules:Lua` folder or consider the second option.
		b. Render Cleanpass (safe): Renders all clean pass frames individually. Use this option if the first one is unsuccessful for any reason.
	- When the CleanPass is generated, the Dialogue window will appears: "Do you want to reset your trimming..."
	- Press Yes in that Dialogue to load the whole cleanpass sequence.
3. Define a Reference Frame using the 'Set Reference Frame' button.
4. Start the analysis with one of the dedicated buttons:
	- Analyze Forward
	- Analyze Backward
	- Analyze Forward then Backward
5. To apply the distortion, connect the VectorWarp to the Input (yellow) of the STMapper (available in Reactor) or a Texture node. Ensure that the image input matches the resolution of the rendered STMap sequence.
					]],
	},
				Method = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method",
					Page = "Vectors",
				},
				Method2Proxy = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Proxy",
					Default = 2,
				},
				Method2Smoothness = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Smoothness",
					Default = 40,
				},
				Method2Edges = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Edges",
					Default = 5,
				},
				Method2MatchWeight = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.MatchWeight",
					Default = 0.75,
				},
				Method2MismatchPenalty = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.MismatchPenalty",
					Default = 2,
				},
				Method2NumWarps = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.NumWarps",
					Default = 8,
				},
				Method2NumIters = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.NumIters",
					Default = 28,
				},
				Method2Filtering = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Filtering",
					Default = 1,
				},
				AdvancedNumWarps = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.NumWarps",
					Default = 8,
				},
				AdvancedNumIters = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.NumIters",
					Default = 16,
				},
				AdvancedSmoothness = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.Smoothness",
					Default = 22,
				},
				AdvancedHalfRes = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.HalfRes",
					Default = 0,
				},
				UseMatte = InstanceInput {
					SourceOp = "Dissolve4",
					Source = "Mix",
					Page = "Matte",
					Default = 0,
				},
				Blank0 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				View = InstanceInput {
					SourceOp = "_Display_",
					Source = "Mix",
					Default = 1,
				},
				Blank1 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				FilterType = InstanceInput {
					SourceOp = "Blur1",
					Source = "Filter",
				},
				Softness = InstanceInput {
					SourceOp = "Blur1",
					Source = "XBlurSize",
					Default = 0,
				},
				GlobalIn = InstanceInput {
					SourceOp = "Source",
					Source = "GlobalIn",
					ControlGroup = 7,
					Page = "File",
				},
				GlobalOut = InstanceInput {
					SourceOp = "Source",
					Source = "GlobalOut",
					ControlGroup = 7,
				},
				Input51 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				Loader = InstanceInput {
					SourceOp = "Source",
					Source = "Clip",
					Name = "Loader (autofilled)",
					Page = "File",
				},
				Depth = InstanceInput {
					SourceOp = "Source",
					Source = "Depth",
					Page = "Hidden",
				},
				Input50 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				SaverOutput = InstanceInput {
					SourceOp = "VW_SAVER",
					Source = "Clip",
					Name = "Saver",
					Page = "File",
					Width = 1,
				},
                SaveFrames = InstanceInput {
                    SourceOp = "VW_SAVER",
                    Source = "SaveFrames",
					Page = "Hidden",
                },
				GarbageMatte = InstanceInput {
					SourceOp = "ChangeDepth1",
					Source = "Input",
				},
				OFInput = InstanceInput {
					SourceOp = "External",
					Source = "Foreground",
					Name = "VectorsInput",
				},
				Input = InstanceInput {
					SourceOp = "PipeRouter1",
					Source = "Input",
					Name = "GarbageMatte",
				}
			},
			Outputs = {
				MainOutput = InstanceOutput {
					SourceOp = "VW_SAVER",
					Source = "Output",
				},
				-- VectorsOutput = InstanceOutput {
				-- 	SourceOp = "vectors_to_RGB",
				-- 	Source = "Output",
				-- 	Name = "VectorsOutput",
				-- },
			},
			ViewInfo = GroupInfo {
				Pos = { 49.3133, 315.243 },
				Flags = {
					AllowPan = false,
					ForceModes = false,
					ConnectedSnap = true,
					AutoSnap = true,
					ShowInstance = false,
					Thumbnails = false,
					RemoveRouters = true
				},
				Size = { 840.789, 987.574, 420.395, 24.2424 },
				Direction = "Vertical",
				PipeStyle = "Direct",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				Source = Loader {
					Clips = {
						Clip {
							ID = "Clip1",
							Filename = "Comp:VectorWarp\\render001.0000.exr",
							FormatID = "OpenEXRFormat",
							StartFrame = 0,
							Length = 2000,
							LengthSetManually = true,
							TrimIn = 0,
							TrimOut = 2000,
							ExtendFirst = 0,
							ExtendLast = 0,
							Loop = 1,
							AspectMode = 0,
							Depth = 5,
							TimeCode = 0,
							GlobalStart = 0,
							GlobalEnd = 2000
						}
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						MissingFrames = Input { Value = 2, },
						Red = Input { Value = 0.5, },
						Alpha = Input { Value = 1, },
						Depth = Input { Value = 5, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						["Clip1.OpenEXRFormat.RedName"] = Input { Value = FuID { "R" }, },
						["Clip1.OpenEXRFormat.GreenName"] = Input { Value = FuID { "G" }, },
						["Clip1.OpenEXRFormat.BlueName"] = Input { Value = FuID { "B" }, },
						["Clip1.OpenEXRFormat.AlphaName"] = Input { Value = FuID { "A" }, },
					},
					ViewInfo = OperatorInfo { Pos = { -324.403, 505.875 } },
				},
				PipeRouter1 = PipeRouter {
					PassThrough = true,
					CtrlWShown = false,
					ViewInfo = PipeRouterInfo { Pos = { 392.5, 231.348 } },
				},
				PipeRouter2 = PipeRouter {
					Inputs = {
						Input = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { 308.471, 868.311 } },
				},
				PipeRouter1_1 = PipeRouter {
					PassThrough = true,
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = "PipeRouter2_1",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -393.289, 729.665 } },
				},
				PipeRouter4 = PipeRouter {
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = "_UVS_",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -173.737, 269.44 } },
				},
				PipeRouter2_1 = PipeRouter {
					PassThrough = true,
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = "PipeRouter4",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -393.289, 269.44 } },
				},

				Blur1 = Blur {
					CtrlWShown = false,
					Inputs = {
						Filter = Input { Value = FuID { "Fast Gaussian" }, },
						XBlurSize = Input { Value = 0, },
						Input = Input {
							SourceOp = "CleanPlate1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 308.471, 366.247 } },
				},
				CleanPlate1 = CleanPLate {
					CtrlWShown = false,
					Inputs = {
						InsideFill = Input { Value = 1, },
						HoldTime = Input { Value = 1001, },
						["Garbage.Matte"] = Input {
							SourceOp = "PipeRouter1",
							Source = "Output",
						},
						Input = Input {
							SourceOp = "vectors_to_RGB",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 308.471, 257.83 } },
				},
				_Display_ = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "PipeRouter2",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "_Render_",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 868.311 } },
					UserControls = ordered() {
						Mix = {
							{ MBTNC_AddButton = "Vectors" },
							{ MBTNC_AddButton = "STMap" },
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							INP_MaxScale = 1,
							INP_Default = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							MBTNC_ForceButtons = true,
							MBTNC_Style = "TabButton",
							MBTNC_StretchToFit = true,
							LINKS_Name = "View",
						}
					}
				},
				Merge1 = Merge {
					CtrlWShown = false,
					Inputs = {
						EffectMask = Input {
							SourceOp = "PipeRouter1",
							Source = "Output",
						},
						Background = Input {
							SourceOp = "vectors_to_RGB",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Blur1",
							Source = "Output",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 308.471, 508.234 } },
				},
				Dissolve4 = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					Inputs = {
						Background = Input {
							SourceOp = "vectors_to_RGB",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
						Mix = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 535.289 } },
					UserControls = ordered() {
						Mix = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "CheckboxControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							CBC_TriState = false,
							LINKS_Name = "Use Matte",
						}
					}
				},
				VW_SAVER = Saver {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						ProcessWhenBlendIs00 = Input { Value = 0, },
						Clip = Input {
							Value = Clip {
								Filename = "Comp:VectorWarp\\render001.0000.exr",
								FormatID = "OpenEXRFormat",
								Length = 0,
								Saving = true,
								TrimIn = 0,
								ExtendFirst = 0,
								ExtendLast = 0,
								Loop = 1,
								AspectMode = 0,
								Depth = 0,
								TimeCode = 0,
								GlobalStart = -2000000000,
								GlobalEnd = 0
							},
						},
						OutputFormat = Input { Value = FuID { "OpenEXRFormat" }, },
						SaveFrames = Input { Value = FuID { "Full" }, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						["OpenEXRFormat.Depth"] = Input { Value = 2, },
						Input = Input {
							SourceOp = "_Display_",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 929.363 } },
				},
				vectors_to_RGB = ChannelBoolean {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						ToRed = Input {
							Value = 33,
							Expression = "iif(VectorWarp.Direction==0,33,31)",
						},
						ToGreen = Input {
							Value = 34,
							Expression = "iif(VectorWarp.Direction==0,34,32)",
						},
						ToBlue = Input { Value = 15, },
						ToAlpha = Input { Value = 16, },
						Background = Input {
							SourceOp = "External",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 208.983 } },
				},
				Displace1 = Displace {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Type = Input { Value = 1, },
						XRefraction = Input {
							Value = 0.00104166666666667,
							Expression = "iif(time==VectorWarp.ReferenceFrame,0,1/self.Input.OriginalWidth)",
						},
						YRefraction = Input {
							Value = 0.00104166666666667,
							Expression = "iif(time==VectorWarp.ReferenceFrame,0,1/self.Input.OriginalWidth)",
						},
						Input = Input {
							SourceOp = "Dissolve1",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Dissolve4",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 618.492 } },
				},
				_Render_ = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "PipeRouter1_1",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Displace1",
							Source = "Output",
						},
						Mix = Input { Expression = "VectorWarp.Render", },
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 729.665 } },
					UserControls = ordered() {
						Mix = {
							{ MBTNC_AddButton = "Clean Pass" },
							{ MBTNC_AddButton = "Full Render" },
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							INP_MaxScale = 1,
							INP_Default = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							MBTNC_StretchToFit = true,
							MBTNC_Style = "TabButton",
							MBTNC_ForceButtons = true,
							LINKS_Name = "Render",
						}
					}
				},
				TimeSpeed1 = TimeSpeed {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Delay = Input {
							Value = 1,
							Expression = "iif(VectorWarp.Direction==0,1,-1)",
						},
						InterpolateBetweenFrames = Input { Value = 0, },
						SampleSpread = Input { Disabled = true, },
						Input = Input {
							SourceOp = "Source",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -324.403, 618.492 } },
				},
				Dissolve1 = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Mix = Input { Expression = "iif(time==VectorWarp.ReferenceFrame,0,1)", },
						Background = Input {
							SourceOp = "PipeRouter4",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "TimeSpeed1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -173.737, 618.492 } },
				},
				OpticalFlow1 = Dimension.OpticalFlow {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = "ChangeDepth1",
							Source = "Output",
						},
						Method = Input { Value = FuID { "Advanced" }, },
						["Method2.Advanced"] = Input { Value = 1, },
						["Advanced.Advanced"] = Input { Value = 1, },
						["Advanced.NumWarps"] = Input { Value = 8, },
						["Advanced.NumIters"] = Input { Value = 16, },
						["Advanced.Smoothness"] = Input { Value = 22, },
					},
					ViewInfo = OperatorInfo { Pos = { 95.2781, 8.15216 } },
				},
				ChangeDepth1 = ChangeDepth {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Depth = Input { Value = 4, },
					},
					ViewInfo = OperatorInfo { Pos = { -243.383, 8.15216 } },
				},
				External = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "OpticalFlow1",
							Source = "Output",
						},
						Mix = Input {
							Value = 0,
							Expression = "VectorWarp.VectorSource",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 95.2781, 62.4267 } },
					UserControls = ordered() {
						Mix = {
							{ MBTNC_AddButton = "Internal" },
							{ MBTNC_AddButton = "External" },
							INP_MaxAllowed = 1,
							INPID_InputControl = "MultiButtonControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							MBTNC_StretchToFit = true,
							MBTNC_Style = "TabButton",
							MBTNC_ForceButtons = true,
							LINKS_Name = "Vector Source",
						}
					}
				},
				_UVS_ = Custom {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						LUTIn1 = Input {
							SourceOp = "_UVS_LUTIn1",
							Source = "Value",
						},
						LUTIn2 = Input {
							SourceOp = "_UVS_LUTIn2",
							Source = "Value",
						},
						LUTIn3 = Input {
							SourceOp = "_UVS_LUTIn3",
							Source = "Value",
						},
						LUTIn4 = Input {
							SourceOp = "_UVS_LUTIn4",
							Source = "Value",
						},
						RedExpression = Input { Value = "x", },
						GreenExpression = Input { Value = "y", },
						BlueExpression = Input { Value = "0", },
						AlphaExpression = Input { Value = "1", },
						Image1 = Input {
							SourceOp = "ChangeDepth1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -173.737, 190.742 } },
				}
			},
			UserControls = ordered() {
				Controls = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Controls",
					CTS_FullName = "Setup and Analysis"
				},
				Vectors = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Channels",
					CTS_FullName = "Vector Options"
				},
				Matte = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Matte",
					CTS_FullName = "Matte Options"
				},
				File = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Solve",
					CTS_FullName = "CleanPass and Saver"
				},
				Hidden = ControlPage {
					CT_Visible = false,
					CTID_DIB_ID = "Icons.Tools.Tabs.Matte",
					CTS_FullName = "Tooltip for Page1"
				},
				Direction = {
					{ MBTNC_AddButton = "Forward" },
					{ MBTNC_AddButton = "Reverse" },
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "MultiButtonControl",
					MBTNC_ShowBasicButton = true,
					INP_MaxScale = 1,
					INP_MinScale = 0,
					ICS_ControlPage = "Hidden",
					LINKID_DataType = "Number",
					MBTNC_ShowName = true,
					MBTNC_StretchToFit = true,
					MBTNC_ShowToolTip = true,
					LINKS_Name = "Direction",
				},
				SetupLabel = {
					INP_Integer = false,
					INP_External = false,
					LBLC_DropDownButton = true,
					INP_Passive = false,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 5,
					LBLC_NestLevel = 2,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Setup",
				},
				VectorSource = {
					{ MBTNC_AddButton = "Internal" },
					{ MBTNC_AddButton = "External" },
					ICD_Width = 1,
					INP_Integer = false,
					INPID_InputControl = "MultiButtonControl",
					MBTNC_ShowBasicButton = true,
					ICS_ControlPage = "Controls",
					LINKID_DataType = "Number",
					MBTNC_ShowName = true,
					MBTNC_StretchToFit = true,
					MBTNC_ShowToolTip = true,
					LINKS_Name = "Vector Source",
					INP_External = false
				},
				sep0 = {
					ICS_ControlPage = "Controls",
					INPID_InputControl = "SeparatorControl",
				},
				ReferenceFrame = {
					ICD_Width = 1,
					INP_Integer = true,
					INPID_InputControl = "ScrewControl",
					IC_Steps = 100,
					INP_MaxScale = 100,
					INP_Default = 0,
					INP_MinScale = 0,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					LINKS_Name = "Reference Frame",
				},
				SetReferenceFrame = {
					ICD_Width = 1,
					INP_Integer = false,
					LINKID_DataType = "Number",
					BTNCS_Execute = [[
						
						tool:SetInput('ReferenceFrame', comp.CurrentTime, fu.TIME_UNDEFINED)
						
						]],
						ICS_ControlPage = "Controls",
						INPID_InputControl = "ButtonControl",
						LINKS_Name = "Set Reference Frame",
					},
					GoToFrame = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = "comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]",
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 1,
					LINKS_Name = "Go To Frame"
				},
				AnalysisLabel = {
					INP_Integer = false,
					LBLC_DropDownButton = true,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 9,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Analysis"
				},
				Render = {
					{ MBTNC_AddButton = "CleanPass" },
					{ MBTNC_AddButton = "Full Render" },
					ICD_Width = 1,
					INP_Integer = false,
					INPID_InputControl = "MultiButtonControl",
					MBTNC_ShowBasicButton = true,
					ICS_ControlPage = "Hidden",
					LINKID_DataType = "Number",
					MBTNC_ShowName = true,
					MBTNC_StretchToFit = true,
					MBTNC_ShowToolTip = true,
					LINKS_Name = "Render Process",
					INP_External = false
				},
				GenerateCleanPass = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						
					local function CopyFile(old_path, new_path)
						print("copying CleanPass to file: " .. new_path)
							
						if utf_module_loaded then
							old_path = utf8_to_win(old_path)
							new_path = utf8_to_win(new_path)
						end
						local old_file = io.open(old_path, "rb")
						local new_file = io.open(new_path, "wb")
						local old_file_sz, new_file_sz = 0, 0
						if not old_file or not new_file then
							return false
						end
						while true do
                            local block = old_file:read(2^13)
                            if not block then 
                                old_file_sz = old_file:seek("end")
                                break
                            end
                            new_file:write(block)
                        end
                        old_file:close()
                        new_file_sz = new_file:seek("end")
                        new_file:close()
                        return new_file_sz == old_file_sz
                    end
                    
                    local function ParseFilename(filename)
                        local seq = {}
                        seq.FullPath = filename
                        string.gsub(seq.FullPath, "^(.+[/\\])(.+)", function(path, name)
							seq.Path = path
							seq.FullName = name
						end)
                        string.gsub(seq.FullName, "^(.+)(%..+)$", function(name, ext)
							seq.Name = name
							seq.Extension = ext
						end)
                        -- check if no extension
                        if not seq.Name then
                            seq.Name = seq.FullName
                        end
						
                        string.gsub(seq.Name, "^(.-)(%d+)$", function(name, SNum)
							seq.CleanName = name
							seq.SNum = SNum
						end)
						
                        if seq.SNum then
                            seq.Number = tonumber(seq.SNum)
                            seq.Padding = string.len(seq.SNum)
                        else
							seq.SNum = ""
							seq.CleanName = seq.Name
                        end
						
                        if seq.Extension == nil then
                            seq.Extension = ""
                        end
                        return seq 
                    end

					function sleep (a) 
						local sec = tonumber(os.clock() + a); 
						while (os.clock() < sec) do 
						end 
					end
					
                    local function CreateCleanPass(tool)
                        local renderStart = comp:GetAttrs().COMPN_RenderStart
                        local renderEnd = comp:GetAttrs().COMPN_RenderEnd
                        tool.Render = 0

						comp.CurrentTime = renderStart
						
                        comp:SetAttrs({COMPN_CurrentTime = renderStart}) 
                        comp:SetAttrs({COMPN_RenderEnd = renderStart + 1})
						
						fusion.CacheManager:Purge()
						tool.SaveFrames = "HiQInteractive"
						comp:Loop(false)
						comp:Play()
						sleep(2)
						tool.SaveFrames = "Full"
						comp:Stop()
						print("Rendered a single clean plate file")
                        comp:SetAttrs({COMPN_RenderEnd = renderEnd})
                        
						local svr = tool:GetChildrenList(false, "Saver")[1]
                        saverClip = svr.Clip[0]
                        seq = ParseFilename(saverClip)
						
                        local ldr = tool:GetChildrenList(false, "Loader")[1]
						
						-- missing frames to color
						ldr.MissingFrames[0] = 2
						
                        padding = string.format("%04d", renderStart)
						loaderClip = seq.Path .. seq.CleanName .. padding .. seq.Extension
						print("Clip Parsed and Loaded: ".. loaderClip)
						ldr.Loop[0] = 0
                        tool.Depth[0] = 5
                        
                        seq = ParseFilename(comp:MapPath(loaderClip))
						
						comp:Lock()
                        oldName = seq.FullPath
                        len = renderEnd - renderStart + 1 -- add extra frame
                        for i = 1, len do
                            padding = string.format("%04d", renderStart + i) 
                            newName = seq.Path .. seq.CleanName .. padding .. seq.Extension
							if not bmd.fileexists(newName) then
                            	CopyFile(oldName, newName)
							end
                        end
						comp:Unlock()
						
						-- Dialog "Do you want to reset your trimming..." should appear here
						ldr.Clip[0] = loaderClip
						
                        print("Clean Pass STMap files created: ".. loaderClip)
                        comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED] 
						comp:Loop(true)
                    end
					
                    local function check_comp()
						if fu:GetResolve() then
							print("This tool is currently tested with Fusion Studio.")
							return true
                        elseif comp:GetAttrs('COMPS_FileName') == '' then
                            print('[VectorWarp] Please save the composition')
                            d = {}
                            d[1] = {"Warning", Name = "", "Text", ReadOnly = true, Lines = 2, Wrap = false, Default = "Please, save the comp to proceed"}
                            ask = comp:AskUser("Warning", d) 
                            if ask then
                                comp:SaveAs()
                            end
							return ask
                        end
						return true
                    end

					local function MoveLoader(ldr)
						if ldr.ID ~= "Loader" then
							return nil
						end
						globalStart = comp:GetAttrs().COMPN_GlobalStart
						inPoint = comp:GetAttrs().COMPN_RenderStart
						comp:StartUndo('Move Loader')
						
						clipName = ldr.Clip[1]
						
						if inPoint == globalStart then
							print("Render IN and Comp Global Start are the same. Trying to parse the loader filename to find the first frame")
							if clipName == "" then
								print("Clip Name is empty. Loader not moved")
								return
							end
							local seq = ParseFilename(clipName)
							inPoint = seq.Number
						end
						bmd.MoveClip(ldr, globalStart, tonumber(inPoint))
						print("New Loader IN point: " .. inPoint)
						comp:EndUndo()
						ldr.HoldFirstFrame[0] = 0
						ldr.HoldLastFrame[0] = 0
					end

                    if not tool then
                        tool = comp.ActiveTool
                    end
					
                    if check_comp() then
						win_utf_module = "win-125x"
						utf_module_loaded, module = pcall(require, win_utf_module)
						if utf_module_loaded then
							codepage_settings = module.codepage
							print("Current codepage win-125x settings: " .. codepage_settings)
							require("win-125x")
							print('Module ' .. win_utf_module .. ' found and loaded')
						end
						CreateCleanPass(tool)
						local ldr = tool:GetChildrenList(false, "Loader")[1]

						MoveLoader(ldr)
						print("[Done] Now press Analyze button")

					end
					
                    ]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Generate CleanPass (fast)"
				},
				RenderCleanPass = {
					ICD_Width = 0.5,
					INP_Integer = false,
					LINKID_DataType = "Number",
					BTNCS_Execute = [[
						function sleep (a) 
							local sec = tonumber(os.clock() + a); 
							while (os.clock() < sec) do 
							end 
						end

						local function ParseFilename(filename)
							local seq = {}
							seq.FullPath = filename
							string.gsub(seq.FullPath, "^(.+[/\\])(.+)", function(path, name)
								seq.Path = path
								seq.FullName = name
							end)
							string.gsub(seq.FullName, "^(.+)(%..+)$", function(name, ext)
								seq.Name = name
								seq.Extension = ext
							end)
							-- check if no extension
							if not seq.Name then
								seq.Name = seq.FullName
							end
							
							string.gsub(seq.Name, "^(.-)(%d+)$", function(name, SNum)
								seq.CleanName = name
								seq.SNum = SNum
							end)
							
							if seq.SNum then
								seq.Number = tonumber(seq.SNum)
								seq.Padding = string.len(seq.SNum)
							else
								seq.SNum = ""
								seq.CleanName = seq.Name
							end
							
							if seq.Extension == nil then
								seq.Extension = ""
							end
							return seq 
						end

						local function MoveLoader(ldr)
							if ldr.ID ~= "Loader" then
								return nil
							end
							globalStart = comp:GetAttrs().COMPN_GlobalStart
							inPoint = comp:GetAttrs().COMPN_RenderStart
							comp:StartUndo('Move Loader')
							
							clipName = ldr.Clip[1]
							
							if inPoint == globalStart then
								print("Render IN and Comp Render Start are the same. Trying to parse the loader filename to find the first frame")
								if clipName == "" then
									print("Clip Name is empty. Loader not moved")
									return
								end
								seq = ParseFilename(clipName)
								inPoint = seq.Number
							end
							bmd.MoveClip(ldr, globalStart, tonumber(inPoint))
							print("New Loader IN point: " .. inPoint)
							comp:EndUndo()
							ldr.HoldFirstFrame[0] = 0
							ldr.HoldLastFrame[0] = 0
						end

						local function RenderCleanpass()
							local ldr = tool:GetChildrenList(false, "Loader")[1]
							local svr = tool:GetChildrenList(false, "Saver")[1]
							saverClip = svr.Clip[0]
							
							renderStart = comp:GetAttrs().COMPN_RenderStart
							renderEnd = comp:GetAttrs().COMPN_RenderEnd
							
							-- replace double dots in the saver path
							padding = string.format("%04d", renderStart)
							
							local loaderClip = comp:MapPath(saverClip)
							local pattern = "%.%.(%w+)$"
							if string.match(loaderClip, pattern) then
								loaderClip = loaderClip:gsub(pattern, "." .. padding .. ".%1")
							else
								local seq = ParseFilename(loaderClip)
								dump(seq)
								loaderClip = seq.Path .. seq.CleanName .. padding .. seq.Extension
							end
							
							-- print("LOADER: " .. loaderClip)
							tool.Render = 0
							temp_time = comp.CurrentTime
							comp.CurrentTime = renderStart
							comp:Loop(false)
							fusion.CacheManager:Purge()
							tool.SaveFrames = "HiQInteractive"
							comp:Play()
							
							while true do 
								if temp_time < comp.CurrentTime then
									temp_time = temp_time + 1
									print(".")
								end
								if not comp:IsPlaying() then
									sleep(2)
									break
								end
							end
							comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED] or temp_time
							tool.SaveFrames = "Full"
							ldr.Clip[0] = comp:MapPath(loaderClip)

							MoveLoader(ldr)
							print("[Done] Now press Analyze button")

							fusion.CacheManager:Purge()
						end

						RenderCleanpass()
					]],
					ICS_ControlPage = "Controls",
					INPID_InputControl = "ButtonControl",
					LINKS_Name = "Render CleanPass (safe)",
					},
				AnalyzeBackward = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						print("Running " .. self.Name)

						local function WarningDialog(error)
							print('[VectorWarp] ' .. error)
							d = {}

							d[1] = {"Warning", Name = "", "Text", ReadOnly = true, Lines = 3, Wrap = false, Default = error}
							ask = comp:AskUser("Warning", d) 
							return ask
						end

						function sleep (a) 
							local sec = tonumber(os.clock() + a); 
							while (os.clock() < sec) do 
							end 
						end
						local function RenderBackward()
							if not tool then
								tool = comp.ActiveTool
							end
							local renderStart = comp:GetAttrs().COMPN_RenderStart
							local renderEnd = comp:GetAttrs().COMPN_RenderEnd
	
							refFrame = tool.ReferenceFrame[fu.TIME_UNDEFINED] 
							if refFrame < renderStart or refFrame > renderEnd then
								warning = WarningDialog("Reference frame [" .. refFrame .. "] is out of the region!\nAnalyze process cancelled.")
								return
							end
							
							tool.Render = 1

							-- set vectors destination
							tool.Direction = 1

							comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]
							comp:Loop(false)
							fusion.CacheManager:Purge()
							temp_time = comp.CurrentTime
							tool.SaveFrames = "HiQInteractive"
							
							-- play backward 
							comp:Play(true)

							while true do
								if temp_time > comp.CurrentTime then
									temp_time = temp_time - 1
									print("Analyzing backward frame " .. temp_time)
								end
								if not comp:IsPlaying() then
									sleep(2)
									break
								end
							end
							comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]
							tool.SaveFrames = "Full"
						end
						
						RenderBackward()
						
						]],
						INP_MaxScale = 1,
						INP_MinScale = 0,
						INP_MinAllowed = -1000000,
						LINKID_DataType = "Number",
						ICS_ControlPage = "Controls",
						ICD_Width = 0.5,
						LINKS_Name = "Analyze Backward"
						},
					AnalyzeForward = {
						INP_MaxAllowed = 1000000,
						INP_Integer = false,
						INPID_InputControl = "ButtonControl",
						BTNCS_Execute = [[
							print("Running " .. self.Name)

							local function WarningDialog(error)
								print('[VectorWarp] ' .. error)
								d = {}
	
								d[1] = {"Warning", Name = "", "Text", ReadOnly = true, Lines = 3, Wrap = false, Default = error}
								ask = comp:AskUser("Warning", d) 
								return ask
							end
	
							function sleep (a) 
								local sec = tonumber(os.clock() + a); 
								while (os.clock() < sec) do 
								end 
							end

							local function RenderForward()
								if not tool then
									tool = comp.ActiveTool
								end
								local renderStart = comp:GetAttrs().COMPN_RenderStart
								local renderEnd = comp:GetAttrs().COMPN_RenderEnd
		
								refFrame = tool.ReferenceFrame[fu.TIME_UNDEFINED] 
								if refFrame < renderStart or refFrame > renderEnd then
									warning = WarningDialog("Reference frame [" .. refFrame .. "] is out of the region!\nAnalyze process cancelled.")
									return
								end
								
								tool.Render = 1

								-- set vectors destination
								tool.Direction = 0

								comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]
								comp:Loop(false)
								fusion.CacheManager:Purge()
								temp_time = comp.CurrentTime
								tool.SaveFrames = "HiQInteractive"
								
								-- play forward 
								comp:Play()
								while true do
									if temp_time < comp.CurrentTime then
										temp_time = temp_time + 1
										print("Analyzing forward frame " .. temp_time)
									end
									if not comp:IsPlaying() then
										sleep(2)
										break
									end
								end

								comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]
								tool.SaveFrames = "Full"
							end
							
							RenderForward()
							
							]],
						INP_MaxScale = 1,
						INP_MinScale = 0,
						INP_MinAllowed = -1000000,
						LINKID_DataType = "Number",
						ICS_ControlPage = "Controls",
						ICD_Width = 0.5,
						LINKS_Name = "Analyze Forward"
						},
					AnalyzeVectors = {
						INP_MaxAllowed = 1000000,
						INP_Integer = false,
						INPID_InputControl = "ButtonControl",
						BTNCS_Execute = [[
							print("Running " .. self.Name)

							local function WarningDialog(error)
								print('[VectorWarp] ' .. error)
								d = {}
	
								d[1] = {"Warning", Name = "", "Text", ReadOnly = true, Lines = 3, Wrap = false, Default = error}
								ask = comp:AskUser("Warning", d) 
								return ask
							end
	
							function sleep (a) 
								local sec = tonumber(os.clock() + a); 
								while (os.clock() < sec) do 
								end 
							end
							local function AnalyzeVectors()
								if not tool then
									tool = comp.ActiveTool
								end

								local renderStart = comp:GetAttrs().COMPN_RenderStart
								local renderEnd = comp:GetAttrs().COMPN_RenderEnd
		
								refFrame = tool.ReferenceFrame[fu.TIME_UNDEFINED] 
								if refFrame < renderStart or refFrame > renderEnd then
									warning = WarningDialog("Reference frame [" .. refFrame .. "] is out of the region!\nAnalyze process cancelled.")
									return
								end

								tool.Render = 1
								tool.Direction = 0 
								comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED] 
								comp:Loop(false) 
								fusion.CacheManager:Purge()
								local renderEnd = comp:GetAttrs().COMPN_RenderEnd
								local renderStart = comp:GetAttrs().COMPN_RenderStart
								
								temp_time = comp.CurrentTime
								tool.SaveFrames = "HiQInteractive"
								comp:Play()
								while true do 
									if temp_time < comp.CurrentTime then
										temp_time = temp_time + 1
										print("Analyzing forward frame " .. temp_time)
									end
									if not comp:IsPlaying() then
										sleep(2)
										break
									end
								end
								comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]
								fusion.CacheManager:Purge()
								tool.Direction = 1 
								temp_time = comp.CurrentTime
								comp:Play(true)
								while true do
									if temp_time > comp.CurrentTime then
										temp_time = temp_time - 1
										print("Analyzing backward frame " .. temp_time)
									end
									if not comp:IsPlaying() then
										sleep(2)
										break
									end
								end
								tool.SaveFrames = "Full"
								comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]
								collectgarbage()
							end
							AnalyzeVectors()
						]],
						INP_MaxScale = 1,
						INP_MinScale = 0,
						INP_MinAllowed = -1000000,
						LINKID_DataType = "Number",
						ICS_ControlPage = "Controls",
						ICD_Width = 1,
						LINKS_Name = "Analyze Forward then Backward"
					},

					MoveLoader = {
						INP_MaxAllowed = 1000000,
						INP_Integer = false,
						INPID_InputControl = "ButtonControl",
						BTNCS_Execute = [[

							local function ParseFilename(filename)
								local seq = {}
								seq.FullPath = filename
								string.gsub(seq.FullPath, "^(.+[/\\])(.+)", function(path, name)
									seq.Path = path
									seq.FullName = name
								end)
								string.gsub(seq.FullName, "^(.+)(%..+)$", function(name, ext)
									seq.Name = name
									seq.Extension = ext
																		end)
								-- check if no extension
								if not seq.Name then
									seq.Name = seq.FullName
								end
								
								string.gsub(seq.Name, "^(.-)(%d+)$", function(name, SNum)
									seq.CleanName = name
									seq.SNum = SNum
								end)
								
								if seq.SNum then
									seq.Number = tonumber(seq.SNum)
									seq.Padding = string.len(seq.SNum)
								else
									seq.SNum = ""
									seq.CleanName = seq.Name
								end
								
								if seq.Extension == nil then
									seq.Extension = ""
								end
								return seq 
							end

							local function MoveLoader(ldr)
								if ldr.ID ~= "Loader" then
									return nil
								end
								globalStart = comp:GetAttrs().COMPN_GlobalStart
								inPoint = comp:GetAttrs().COMPN_RenderStart
								comp:StartUndo('Move Loader')
								
								clipName = ldr.Clip[1]
								seq = ParseFilename(clipName)
								
								if inPoint == globalStart then
									print("Render IN and Comp Render Start are the same. Trying to parse the loader filename to find the first frame")
									if clipName == "" then
										print("Clip Name is empty. Loader not moved")
										return
									end
									inPoint = seq.Number
								end
								bmd.MoveClip(ldr, globalStart, tonumber(inPoint))
								print("New Loader IN point: " .. inPoint)
								comp:EndUndo()
								ldr.HoldFirstFrame[0] = 0
								ldr.HoldLastFrame[0] = 0
							end
							
							local ldr = tool:GetChildrenList(false, "Loader")[1]
							MoveLoader(ldr)
							]],
						INP_MaxScale = 1,
						INP_MinScale = 0,
						INP_MinAllowed = -1000000,
						LINKID_DataType = "Number",
						ICS_ControlPage = "Controls",
						ICD_Width = 0.5,
						LINKS_Name = "Move Vectors to Render Start",
					},

					DeleteVectors = {
						INP_MaxAllowed = 1000000,
						INP_Integer = false,
						INPID_InputControl = "ButtonControl",
						BTNCS_Execute = [[

							local function ParseFilename(filename)
								local seq = {}
								seq.FullPath = filename
								string.gsub(seq.FullPath, "^(.+[/\\])(.+)", function(path, name)
									seq.Path = path
									seq.FullName = name
								end)
								string.gsub(seq.FullName, "^(.+)(%..+)$", function(name, ext)
									seq.Name = name
									seq.Extension = ext
																		end)
								-- check if no extension
								if not seq.Name then
									seq.Name = seq.FullName
								end
								
								string.gsub(seq.Name, "^(.-)(%d+)$", function(name, SNum)
									seq.CleanName = name
									seq.SNum = SNum
								end)
								
								if seq.SNum then
									seq.Number = tonumber(seq.SNum)
									seq.Padding = string.len(seq.SNum)
								else
									seq.SNum = ""
									seq.CleanName = seq.Name
								end
								
								if seq.Extension == nil then
									seq.Extension = ""
								end
								return seq 
							end

							local function DeleteVectors(seq)
								platform = (FuPLATFORM_WINDOWS and 'Windows') or (FuPLATFORM_MAC and 'Mac') or (FuPLATFORM_LINUX and 'Linux')
								
								-- Check if the OS is Windows by searching for the Program Files folder
								if platform == "Windows" then
									deleteCommand = "del "
								elseif platform == "Mac" or platform == "Linux" then
									deleteCommand = "rm "
								else
									print("OS Platform not detected")
									return
								end
								imageSequenceFilename = seq.Path .. "*" .. seq.Extension
								print('[Formatted Image Sequence] ' .. imageSequenceFilename)
								
								-- Load utf8-win
								win_utf_module = "win-125x"
								utf_module_loaded, module = pcall(require, win_utf_module)
								if utf_module_loaded then
									require("win-125x")
								end
								if utf_module_loaded then
									imageSequenceFilename = utf8_to_win(imageSequenceFilename)
								end

								deleteRederedCommand = deleteCommand  .. imageSequenceFilename
								print("Deleting file equence using command: " .. "[ "..deleteRederedCommand.." ]")
								os.execute(deleteRederedCommand)
								print('[Vector files Cleared]')
							end

							local function ConfirmDialog(message)
								print('[VectorWarp] ' .. message)
								d = {}
								d[1] = {"Warning", Name = "", "Text", ReadOnly = true, Lines = 2, Wrap = false, Default = "Are you sure you want\nto remove all Vectors?"}
								ask = comp:AskUser("Warning", d) 
								return ask
							end
							process = ConfirmDialog("File removal confirmation dialogue")

							if process then
								local ldr = tool:GetChildrenList(false, "Loader")[1]
								local clipPath = comp:MapPath(ldr.Clip[0])
								local seq = ParseFilename(clipPath)
								DeleteVectors(seq)
							else
								print("Cancelled")
							end

							]],
						INP_MaxScale = 1,
						INP_MinScale = 0,
						INP_MinAllowed = -1000000,
						LINKID_DataType = "Number",
						ICS_ControlPage = "Controls",
						ICD_Width = 0.5,
						LINKS_Name = "Delete Vectors"
					},

					CreateLoader = {
						INP_MaxAllowed = 1000000,
						INP_Integer = false,
						INPID_InputControl = "ButtonControl",
						BTNCS_Execute = [[

							function CreateLoader(path)
								comp:Lock()
								comp:StartUndo('Create Smart Vector Loader')
								tool = comp.ActiveTool
								local tool_ldr = tool:GetChildrenList(false, "Loader")[1]
								local settings = comp:CopySettings(tool_ldr)
								local flow = comp.CurrentFrame.FlowView
								x, y = flow:GetPos(tool)
								local loader = comp:AddTool("Loader")
								loader:LoadSettings(settings)
								flow:SetPos(loader, x, y+1)
								inputs = tool.MainOutput:GetConnectedInputs()
								for i, input in ipairs(inputs) do
									input:ConnectTo(loader.Output)
								end
								comp:EndUndo()
								comp:Unlock()
							end
							CreateLoader()
							]],
						INP_MaxScale = 1,
						INP_MinScale = 0,
						INP_MinAllowed = -1000000,
						LINKID_DataType = "Number",
						ICS_ControlPage = "Controls",
						ICD_Width = 1,
						LINKS_Name = "Create Loader",
					},


				QuickGuide = {
					INP_Integer = false,
					LBLC_DropDownButton = true,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 3,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Quick Guide",
				},
				Guide = {
					TEC_ReadOnly = false,
					TEC_Wrap = true,
					ICS_ControlPage = "Controls",
					LINKID_DataType = "Text",
					MBTNC_ShowName = false,
					INPID_InputControl = "TextEditControl",
					TEC_Lines = 20,
					LINKS_Name = "Guide",
				},
				sep3 = {
					INPID_InputControl = "SeparatorControl",
					ICS_ControlPage = "Controls",
				},
				Tutorial = {
					ICD_Width = 0.85,
					INP_Integer = false,
					LINKID_DataType = "Number",
					BTNCS_Execute = "					os.execute('open \"\" \"https://youtu.be/-q7VanQSawI\"')\n					os.execute('start \"\" \"https://youtu.be/-q7VanQSawI\"')\n					",
					ICS_ControlPage = "Controls",
					INPID_InputControl = "ButtonControl",
					LINKS_Name = "Tutorial",
				},
			}
		},
		_UVS_LUTIn1 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 204, Green = 0, Blue = 0 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		},
		_UVS_LUTIn2 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 0, Green = 204, Blue = 0 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		},
		_UVS_LUTIn3 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 0, Green = 0, Blue = 204 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		},
		_UVS_LUTIn4 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 204, Green = 204, Blue = 204 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		}
	},
	ActiveTool = "VectorWarp"
}
