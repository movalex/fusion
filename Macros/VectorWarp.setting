--[[-- 
https://emiliosapia.myportfolio.com
Written by : Emilio Sapia, Alexey Bogomolov
Last Update : Jan, 2024
version 2.9

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]--

{
	Tools = ordered() {
		VectorWarp = MacroOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				},
			},
			Inputs = ordered() {
				CommentsNest = Input { Value = 0, },
				File = Input { Value = "comp:VectorWarp\\render001.0000.exr", },
				Guide = Input { Value = [[
QUICK GUIDE:
VectorWarp is a motion tracking and stabilization tool that creates STMaps (spatial transformation maps)
using optical flow analysis. These reusable distortion maps can stabilize footage, track motion, or create warping effects.

SIMPLIFIED WORKFLOWS (NEW):
• Auto Process: Complete workflow in one click (generates CleanPass, sets reference, analyzes motion)
  Uses current frame as reference, ideal for general processing.

• Quick Stabilize: Auto-stabilizes footage to remove camera shake
  Automatically uses the MIDDLE frame as reference because:
  - Minimizes maximum warp distance (half compared to using first/last frame)
  - Reduces distortion artifacts on frames far from reference
  - Industry standard approach for stabilization
  - Provides most balanced motion compensation

• Quick Track: Tracks forward motion from current frame
  Uses current frame as reference, ideal for following an object.

MANUAL WORKFLOW:
1. Connect your footage to the VectorWarp input.

2. Generate CleanPass STMaps
   This creates a sequence of STMap files that capture spatial transformations for each frame.
   - Default location: comp:VectorWarp folder
   - To change location: Go to File tab and set the Saver path

   Two generation methods:
   a. Generate CleanPass (fast) - RECOMMENDED
      Renders one frame and copies it to create the sequence. Much faster.
      NOTE: Paths must not contain non-Latin characters. If needed, install the win125x.lua
      module in Modules:Lua folder, or use method b.

   b. Render CleanPass (safe)
      Renders each frame individually. Slower but works with any path.

   - After generation, a dialog asks: "Do you want to reset your trimming..."
   - Click Yes to load the complete CleanPass sequence.

3. Set Reference Frame
   Click 'Set Reference Frame' at the frame you want to use as the tracking reference point.
   All motion will be analyzed relative to this frame.

4. Analyze Motion Vectors
   Choose an analysis direction based on your needs:
   - Analyze Forward: Tracks motion from reference frame forward in time
   - Analyze Backward: Tracks motion from reference frame backward in time
   - Analyze Forward then Backward: Analyzes entire timeline in both directions

   The tool uses optical flow to calculate motion vectors between frames.

5. Apply the Distortion
   Connect VectorWarp output to the Input (yellow) of an STMapper node (available in Reactor)
   or a Texture node. The image input must match the STMap sequence resolution.

ADVANCED: Use the Vectors page to adjust optical flow parameters (smoothness, warps, iterations)
for better motion analysis quality.
					]],
	},
				Method = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method",
					Page = "Vectors",
				},
				Method2Proxy = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Proxy",
					Default = 2,
				},
				Method2Smoothness = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Smoothness",
					Default = 40,
				},
				Method2Edges = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Edges",
					Default = 5,
				},
				Method2MatchWeight = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.MatchWeight",
					Default = 0.75,
				},
				Method2MismatchPenalty = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.MismatchPenalty",
					Default = 2,
				},
				Method2NumWarps = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.NumWarps",
					Default = 8,
				},
				Method2NumIters = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.NumIters",
					Default = 28,
				},
				Method2Filtering = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Method2.Filtering",
					Default = 1,
				},
				AdvancedNumWarps = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.NumWarps",
					Default = 8,
				},
				AdvancedNumIters = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.NumIters",
					Default = 16,
				},
				AdvancedSmoothness = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.Smoothness",
					Default = 22,
				},
				AdvancedHalfRes = InstanceInput {
					SourceOp = "OpticalFlow1",
					Source = "Advanced.HalfRes",
					Default = 0,
				},
				UseMatte = InstanceInput {
					SourceOp = "Dissolve4",
					Source = "Mix",
					Page = "Matte",
					Default = 0,
				},
				Blank0 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				View = InstanceInput {
					SourceOp = "_Display_",
					Source = "Mix",
					Default = 1,
				},
				Blank1 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				FilterType = InstanceInput {
					SourceOp = "Blur1",
					Source = "Filter",
				},
				Softness = InstanceInput {
					SourceOp = "Blur1",
					Source = "XBlurSize",
					Default = 0,
				},
				GlobalIn = InstanceInput {
					SourceOp = "Source",
					Source = "GlobalIn",
					ControlGroup = 7,
					Page = "File",
				},
				GlobalOut = InstanceInput {
					SourceOp = "Source",
					Source = "GlobalOut",
					ControlGroup = 7,
				},
				Input51 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				Loader = InstanceInput {
					SourceOp = "Source",
					Source = "Clip",
					Name = "Loader (autofilled)",
					Page = "File",
				},
				Depth = InstanceInput {
					SourceOp = "Source",
					Source = "Depth",
					Page = "Hidden",
				},
				Input50 = InstanceInput {
					SourceOp = "vectors_to_RGB",
					Source = "Blank1",
				},
				SaverOutput = InstanceInput {
					SourceOp = "VW_SAVER",
					Source = "Clip",
					Name = "Saver",
					Page = "File",
					Width = 1,
				},
                SaveFrames = InstanceInput {
                    SourceOp = "VW_SAVER",
                    Source = "SaveFrames",
					Page = "Hidden",
                },
				GarbageMatte = InstanceInput {
					SourceOp = "ChangeDepth1",
					Source = "Input",
				},
				OFInput = InstanceInput {
					SourceOp = "External",
					Source = "Foreground",
					Name = "VectorsInput",
				},
				Input = InstanceInput {
					SourceOp = "PipeRouter1",
					Source = "Input",
					Name = "GarbageMatte",
				}
			},
			Outputs = {
				MainOutput = InstanceOutput {
					SourceOp = "VW_SAVER",
					Source = "Output",
				},
				-- VectorsOutput = InstanceOutput {
				-- 	SourceOp = "vectors_to_RGB",
				-- 	Source = "Output",
				-- 	Name = "VectorsOutput",
				-- },
			},
			ViewInfo = GroupInfo {
				Pos = { 49.3133, 315.243 },
				Flags = {
					AllowPan = false,
					ForceModes = false,
					ConnectedSnap = true,
					AutoSnap = true,
					ShowInstance = false,
					Thumbnails = false,
					RemoveRouters = true
				},
				Size = { 840.789, 987.574, 420.395, 24.2424 },
				Direction = "Vertical",
				PipeStyle = "Direct",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				Source = Loader {
					Clips = {
						Clip {
							ID = "Clip1",
							Filename = "Comp:VectorWarp\\render001.0000.exr",
							FormatID = "OpenEXRFormat",
							StartFrame = 0,
							Length = 2000,
							LengthSetManually = true,
							TrimIn = 0,
							TrimOut = 2000,
							ExtendFirst = 0,
							ExtendLast = 0,
							Loop = 1,
							AspectMode = 0,
							Depth = 5,
							TimeCode = 0,
							GlobalStart = 0,
							GlobalEnd = 2000
						}
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						MissingFrames = Input { Value = 2, },
						Red = Input { Value = 0.5, },
						Alpha = Input { Value = 1, },
						Depth = Input { Value = 5, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						["Clip1.OpenEXRFormat.RedName"] = Input { Value = FuID { "R" }, },
						["Clip1.OpenEXRFormat.GreenName"] = Input { Value = FuID { "G" }, },
						["Clip1.OpenEXRFormat.BlueName"] = Input { Value = FuID { "B" }, },
						["Clip1.OpenEXRFormat.AlphaName"] = Input { Value = FuID { "A" }, },
					},
					ViewInfo = OperatorInfo { Pos = { -324.403, 505.875 } },
				},
				PipeRouter1 = PipeRouter {
					PassThrough = true,
					CtrlWShown = false,
					ViewInfo = PipeRouterInfo { Pos = { 392.5, 231.348 } },
				},
				PipeRouter2 = PipeRouter {
					Inputs = {
						Input = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { 308.471, 868.311 } },
				},
				PipeRouter1_1 = PipeRouter {
					PassThrough = true,
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = "PipeRouter2_1",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -393.289, 729.665 } },
				},
				PipeRouter4 = PipeRouter {
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = "_UVS_",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -173.737, 269.44 } },
				},
				PipeRouter2_1 = PipeRouter {
					PassThrough = true,
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = "PipeRouter4",
							Source = "Output",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -393.289, 269.44 } },
				},

				Blur1 = Blur {
					CtrlWShown = false,
					Inputs = {
						Filter = Input { Value = FuID { "Fast Gaussian" }, },
						XBlurSize = Input { Value = 0, },
						Input = Input {
							SourceOp = "CleanPlate1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 308.471, 366.247 } },
				},
				CleanPlate1 = CleanPLate {
					CtrlWShown = false,
					Inputs = {
						InsideFill = Input { Value = 1, },
						HoldTime = Input { Value = 1001, },
						["Garbage.Matte"] = Input {
							SourceOp = "PipeRouter1",
							Source = "Output",
						},
						Input = Input {
							SourceOp = "vectors_to_RGB",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 308.471, 257.83 } },
				},
				_Display_ = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "PipeRouter2",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "_Render_",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 868.311 } },
					UserControls = ordered() {
						Mix = {
							{ MBTNC_AddButton = "Vectors" },
							{ MBTNC_AddButton = "STMap" },
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							INP_MaxScale = 1,
							INP_Default = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							MBTNC_ForceButtons = true,
							MBTNC_Style = "TabButton",
							MBTNC_StretchToFit = true,
							LINKS_Name = "View",
						}
					}
				},
				Merge1 = Merge {
					CtrlWShown = false,
					Inputs = {
						EffectMask = Input {
							SourceOp = "PipeRouter1",
							Source = "Output",
						},
						Background = Input {
							SourceOp = "vectors_to_RGB",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Blur1",
							Source = "Output",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 308.471, 508.234 } },
				},
				Dissolve4 = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					Inputs = {
						Background = Input {
							SourceOp = "vectors_to_RGB",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Merge1",
							Source = "Output",
						},
						Mix = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 535.289 } },
					UserControls = ordered() {
						Mix = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "CheckboxControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							CBC_TriState = false,
							LINKS_Name = "Use Matte",
						}
					}
				},
				VW_SAVER = Saver {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						ProcessWhenBlendIs00 = Input { Value = 0, },
						Clip = Input {
							Value = Clip {
								Filename = "Comp:VectorWarp\\render001.0000.exr",
								FormatID = "OpenEXRFormat",
								Length = 0,
								Saving = true,
								TrimIn = 0,
								ExtendFirst = 0,
								ExtendLast = 0,
								Loop = 1,
								AspectMode = 0,
								Depth = 0,
								TimeCode = 0,
								GlobalStart = -2000000000,
								GlobalEnd = 0
							},
						},
						OutputFormat = Input { Value = FuID { "OpenEXRFormat" }, },
						SaveFrames = Input { Value = FuID { "Full" }, },
						["Gamut.SLogVersion"] = Input { Value = FuID { "SLog2" }, },
						["OpenEXRFormat.Depth"] = Input { Value = 2, },
						Input = Input {
							SourceOp = "_Display_",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 929.363 } },
				},
				vectors_to_RGB = ChannelBoolean {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						ToRed = Input {
							Value = 33,
							Expression = "iif(VectorWarp.Direction==0,33,31)",
						},
						ToGreen = Input {
							Value = 34,
							Expression = "iif(VectorWarp.Direction==0,34,32)",
						},
						ToBlue = Input { Value = 15, },
						ToAlpha = Input { Value = 16, },
						Background = Input {
							SourceOp = "External",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 208.983 } },
				},
				Displace1 = Displace {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Type = Input { Value = 1, },
						XRefraction = Input {
							Value = 0.00104166666666667,
							Expression = "iif(time==VectorWarp.ReferenceFrame,0,1/self.Input.OriginalWidth)",
						},
						YRefraction = Input {
							Value = 0.00104166666666667,
							Expression = "iif(time==VectorWarp.ReferenceFrame,0,1/self.Input.OriginalWidth)",
						},
						Input = Input {
							SourceOp = "Dissolve1",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Dissolve4",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 618.492 } },
				},
				_Render_ = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "PipeRouter1_1",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "Displace1",
							Source = "Output",
						},
						Mix = Input { Expression = "VectorWarp.Render", },
					},
					ViewInfo = OperatorInfo { Pos = { 89.385, 729.665 } },
					UserControls = ordered() {
						Mix = {
							{ MBTNC_AddButton = "Clean Pass" },
							{ MBTNC_AddButton = "Full Render" },
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = "MultiButtonControl",
							INP_MaxScale = 1,
							INP_Default = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							MBTNC_StretchToFit = true,
							MBTNC_Style = "TabButton",
							MBTNC_ForceButtons = true,
							LINKS_Name = "Render",
						}
					}
				},
				TimeSpeed1 = TimeSpeed {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Delay = Input {
							Value = 1,
							Expression = "iif(VectorWarp.Direction==0,1,-1)",
						},
						InterpolateBetweenFrames = Input { Value = 0, },
						SampleSpread = Input { Disabled = true, },
						Input = Input {
							SourceOp = "Source",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -324.403, 618.492 } },
				},
				Dissolve1 = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Mix = Input { Expression = "iif(time==VectorWarp.ReferenceFrame,0,1)", },
						Background = Input {
							SourceOp = "PipeRouter4",
							Source = "Output",
						},
						Foreground = Input {
							SourceOp = "TimeSpeed1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -173.737, 618.492 } },
				},
				OpticalFlow1 = Dimension.OpticalFlow {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = "ChangeDepth1",
							Source = "Output",
						},
						Method = Input { Value = FuID { "Advanced" }, },
						["Method2.Advanced"] = Input { Value = 1, },
						["Advanced.Advanced"] = Input { Value = 1, },
						["Advanced.NumWarps"] = Input { Value = 8, },
						["Advanced.NumIters"] = Input { Value = 16, },
						["Advanced.Smoothness"] = Input { Value = 22, },
					},
					ViewInfo = OperatorInfo { Pos = { 95.2781, 8.15216 } },
				},
				ChangeDepth1 = ChangeDepth {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Depth = Input { Value = 4, },
					},
					ViewInfo = OperatorInfo { Pos = { -243.383, 8.15216 } },
				},
				External = Dissolve {
					Transitions = {
						[0] = "DFTDissolve"
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = "OpticalFlow1",
							Source = "Output",
						},
						Mix = Input {
							Value = 0,
							Expression = "VectorWarp.VectorSource",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 95.2781, 62.4267 } },
					UserControls = ordered() {
						Mix = {
							{ MBTNC_AddButton = "Internal" },
							{ MBTNC_AddButton = "External" },
							INP_MaxAllowed = 1,
							INPID_InputControl = "MultiButtonControl",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = "Number",
							MBTNC_StretchToFit = true,
							MBTNC_Style = "TabButton",
							MBTNC_ForceButtons = true,
							LINKS_Name = "Vector Source",
						}
					}
				},
				_UVS_ = Custom {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						LUTIn1 = Input {
							SourceOp = "_UVS_LUTIn1",
							Source = "Value",
						},
						LUTIn2 = Input {
							SourceOp = "_UVS_LUTIn2",
							Source = "Value",
						},
						LUTIn3 = Input {
							SourceOp = "_UVS_LUTIn3",
							Source = "Value",
						},
						LUTIn4 = Input {
							SourceOp = "_UVS_LUTIn4",
							Source = "Value",
						},
						RedExpression = Input { Value = "x", },
						GreenExpression = Input { Value = "y", },
						BlueExpression = Input { Value = "0", },
						AlphaExpression = Input { Value = "1", },
						Image1 = Input {
							SourceOp = "ChangeDepth1",
							Source = "Output",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -173.737, 190.742 } },
				}
			},
			UserControls = ordered() {
				Controls = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Controls",
					CTS_FullName = "Setup and Analysis"
				},
				Vectors = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Channels",
					CTS_FullName = "Vector Options"
				},
				Matte = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Matte",
					CTS_FullName = "Matte Options"
				},
				File = ControlPage {
					CT_Visible = true,
					CTID_DIB_ID = "Icons.Tools.Tabs.Solve",
					CTS_FullName = "CleanPass and Saver"
				},
				Hidden = ControlPage {
					CT_Visible = false,
					CTID_DIB_ID = "Icons.Tools.Tabs.Matte",
					CTS_FullName = "Tooltip for Page1"
				},
				Direction = {
					{ MBTNC_AddButton = "Forward" },
					{ MBTNC_AddButton = "Reverse" },
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "MultiButtonControl",
					MBTNC_ShowBasicButton = true,
					INP_MaxScale = 1,
					INP_MinScale = 0,
					ICS_ControlPage = "Hidden",
					LINKID_DataType = "Number",
					MBTNC_ShowName = true,
					MBTNC_StretchToFit = true,
					MBTNC_ShowToolTip = true,
					LINKS_Name = "Direction",
				},

				-- New Simplified Workflow Section
				SimplifiedWorkflowLabel = {
					INP_Integer = false,
					INP_Default = 1,
					LBLC_DropDownButton = true,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 3,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Simplified Workflows"
				},

				AutoProcess = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vwf = require("vectorwarp_workflows")
						if not tool then tool = comp.ActiveTool end
						vwf.auto_process(tool, comp, {
							method = "fast",
							direction = "both",
							show_progress = true,
							auto_reference = true
						})
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 1,
					LINKS_Name = "Auto Process (All Steps)",
				},

				QuickStabilize = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vwf = require("vectorwarp_workflows")
						if not tool then tool = comp.ActiveTool end
						vwf.quick_stabilize(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Quick Stabilize",
				},

				QuickTrack = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vwf = require("vectorwarp_workflows")
						if not tool then tool = comp.ActiveTool end
						vwf.quick_track(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Quick Track",
				},

				SetupLabel = {
					INP_Integer = false,
					INP_External = false,
					LBLC_DropDownButton = true,
					INP_Passive = false,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 5,
					LBLC_NestLevel = 2,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Setup",
				},
				VectorSource = {
					{ MBTNC_AddButton = "Internal" },
					{ MBTNC_AddButton = "External" },
					ICD_Width = 1,
					INP_Integer = false,
					INPID_InputControl = "MultiButtonControl",
					MBTNC_ShowBasicButton = true,
					ICS_ControlPage = "Controls",
					LINKID_DataType = "Number",
					MBTNC_ShowName = true,
					MBTNC_StretchToFit = true,
					MBTNC_ShowToolTip = true,
					LINKS_Name = "Vector Source",
					INP_External = false
				},
				sep0 = {
					ICS_ControlPage = "Controls",
					INPID_InputControl = "SeparatorControl",
				},
				ReferenceFrame = {
					ICD_Width = 1,
					INP_Integer = true,
					INPID_InputControl = "ScrewControl",
					IC_Steps = 100,
					INP_MaxScale = 100,
					INP_Default = 0,
					INP_MinScale = 0,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					LINKS_Name = "Reference Frame",
				},
				SetReferenceFrame = {
					ICD_Width = 1,
					INP_Integer = false,
					LINKID_DataType = "Number",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.set_reference_frame(tool, comp)
					]],
					ICS_ControlPage = "Controls",
					INPID_InputControl = "ButtonControl",
					LINKS_Name = "Set Reference Frame",
				},
				GoToFrame = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = "comp.CurrentTime = tool.ReferenceFrame[fu.TIME_UNDEFINED]",
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 1,
					LINKS_Name = "Go To Frame"
				},
				AnalysisLabel = {
					INP_Integer = false,
					LBLC_DropDownButton = true,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 9,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Advanced Controls"
				},
				Render = {
					{ MBTNC_AddButton = "CleanPass" },
					{ MBTNC_AddButton = "Full Render" },
					ICD_Width = 1,
					INP_Integer = false,
					INPID_InputControl = "MultiButtonControl",
					MBTNC_ShowBasicButton = true,
					ICS_ControlPage = "Hidden",
					LINKID_DataType = "Number",
					MBTNC_ShowName = true,
					MBTNC_StretchToFit = true,
					MBTNC_ShowToolTip = true,
					LINKS_Name = "Render Process",
					INP_External = false
				},
				GenerateCleanPass = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.generate_cleanpass_fast(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Generate CleanPass (fast)"
				},
				RenderCleanPass = {
					ICD_Width = 0.5,
					INP_Integer = false,
					LINKID_DataType = "Number",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.render_cleanpass_safe(tool, comp)
					]],
					ICS_ControlPage = "Controls",
					INPID_InputControl = "ButtonControl",
					LINKS_Name = "Render CleanPass (safe)",
				},
				AnalyzeBackward = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.analyze_backward(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Analyze Backward"
				},
				AnalyzeForward = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.analyze_forward(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Analyze Forward"
				},
					
				AnalyzeVectors = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.analyze_both(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 1,
					LINKS_Name = "Analyze Forward then Backward"
				},

				MoveLoader = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						local ldr = tool:GetChildrenList(false, "Loader")[1]
						vlib.move_loader(ldr, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Move Vectors to Render Start",
				},

				DeleteVectors = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.delete_vectors(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 0.5,
					LINKS_Name = "Delete Vectors"
				},

				CreateLoader = {
					INP_MaxAllowed = 1000000,
					INP_Integer = false,
					INPID_InputControl = "ButtonControl",
					BTNCS_Execute = [[
						local vlib = require("vectorlib")
						if not tool then tool = comp.ActiveTool end
						vlib.create_loader(tool, comp)
					]],
					INP_MaxScale = 1,
					INP_MinScale = 0,
					INP_MinAllowed = -1000000,
					LINKID_DataType = "Number",
					ICS_ControlPage = "Controls",
					ICD_Width = 1,
					LINKS_Name = "Create Loader",
				},



				QuickGuide = {
					INP_Integer = false,
					LBLC_DropDownButton = true,
					LINKID_DataType = "Number",
					LBLC_NumInputs = 3,
					ICS_ControlPage = "Controls",
					INPID_InputControl = "LabelControl",
					LINKS_Name = "Quick Guide",
				},
				Guide = {
					TEC_ReadOnly = false,
					TEC_Wrap = true,
					ICS_ControlPage = "Controls",
					LINKID_DataType = "Text",
					MBTNC_ShowName = false,
					INPID_InputControl = "TextEditControl",
					TEC_Lines = 20,
					LINKS_Name = "Guide",
				},
				sep3 = {
					INPID_InputControl = "SeparatorControl",
					ICS_ControlPage = "Controls",
				},
				Tutorial = {
					ICD_Width = 0.85,
					INP_Integer = false,
					LINKID_DataType = "Number",
					BTNCS_Execute = "					os.execute('open \"\" \"https://youtu.be/-q7VanQSawI\"')\n					os.execute('start \"\" \"https://youtu.be/-q7VanQSawI\"')\n					",
					ICS_ControlPage = "Controls",
					INPID_InputControl = "ButtonControl",
					LINKS_Name = "Tutorial",
				},
			}
		},
		_UVS_LUTIn1 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 204, Green = 0, Blue = 0 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		},
		_UVS_LUTIn2 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 0, Green = 204, Blue = 0 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		},
		_UVS_LUTIn3 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 0, Green = 0, Blue = 204 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		},
		_UVS_LUTIn4 = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
					[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 204, Green = 204, Blue = 204 },
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						["Setting:"] = "Macros:/"
					}
				}
			},
		}
	},
	ActiveTool = "VectorWarp"
}
