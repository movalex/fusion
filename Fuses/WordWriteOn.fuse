--[[

Word Write On Fuse

-------------------------------------------------------------------
Copyright (c) 2023,  
Pieter Van Houte
<pieter[at]secondman[dot]com>,
Alexey Bogomolov 
<mail[at]abogomolov.com>)
-------------------------------------------------------------------

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-------------------------------------------------------------------

version 0.1 - 20191114 - initial test version, as Word Write On - https://www.steakunderwater.com/wesuckless/viewtopic.php?p=27080#p27080
version 0.2 - 20191115 - does not delete text from Text+ when adding Modifier (thank you Peter Loveday)
version 0.3 - 20230819 - add split by and concatenate options (addition by Alexey Bogomolov <mail[at]abogomolov.com>)

--]]

version = "Word Write On v0.3 - 19 August 2023"

-------------------------------------------------------------------
-------------------------------------------------------------------
FuRegisterClass("WordWriteOn", CT_Modifier, {
	REGS_Category       = "Fuses",
	REGS_OpIconString   = "WWO",
	REGS_OpDescription  = "Write text one word at a time",
	REGS_Name           = "Word Write On",
	REGID_DataType      = "Text",
	REGID_InputDataType = "Text",
	REGS_Company 		= "Pieter Van Houte",
	REGS_URL 			= "https://www.secondman.com",
	REGS_HelpTopic      = "",
--	REG_Fuse_NoEdit     = true,
--	REG_Fuse_NoReload   = true,
	REG_Version			= 03,
	})
	
function Create()
	
	InStyledText = self:AddInput("Styled Text", "StyledText", {
		LINKID_DataType = "Text",
		INPID_InputControl = "TextEditControl",
		LINK_Main = 1,
		})

	SplitBy = self:AddInput(
		"Split By:", "splitby", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ComboControl",
		INP_Default = 0.0,
		INP_Integer = true,
		{ CCS_AddString = "Space [ ]", },
		{ CCS_AddString = "Underline [_]", },
		{ CCS_AddString = "New Line [\\n]", },
		{ CCS_AddString = "Percent [%]", },
		{ CCS_AddString = "Forward Slash [/]", },
		{ CCS_AddString = "Vertical Line [|]", },
		{ CCS_AddString = "Back Slash [\\]", },
		{ CCS_AddString = "Ampersand [&]", },
		{ CCS_AddString = "Caret [^]", },
		})
	ConcatText = self:AddInput("Join By:", "Concatenate", {
		LINKID_DataType = "Text",
		INPID_InputControl = "TextEditControl",
		TEC_Lines = 1,
		})
	InWords = self:AddInput("Words", "Words", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ScrewControl",
		INP_Integer = true,
		INP_MinAllowed = 0,
		INP_MaxScale = 15,
		INP_Default = 3,
		})
	InLabel = self:AddInput(version, "version", {
		LINKID_DataType = "Text",
		INPID_InputControl = "LabelControl",
		INP_External = false,
		INP_Passive = true,
		})
	OutText = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Text",
		LINK_Main = 1,
		})
end

function SetSource(out, param, time)
  if out == OutText then
    InStyledText:SetSource(param:Copy(), time)
  end
end

function SplitString(inputstr, sep)
	if sep == nil then
		sep = "%s"
	end
	local textTable={}
	for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
		table.insert(textTable, str)
	end
	return textTable
end

function TableSlice(tbl, first, last, step)
  local sliced = {}

  for i = first or 1, last or #tbl, step or 1 do
    sliced[#sliced+1] = tbl[i]
  end

  return sliced
end

function Process(req)

	local inText = InStyledText:GetValue(req).Value
	local wordIndex = InWords:GetValue(req).Value
	local splitIndex = SplitBy:GetValue(req).Value
	local concatText = ConcatText:GetValue(req).Value
	if concatText == "" then
		concatText = "\n"
	end

	splitSymbols = {
		"%s",
		"_",
		"\n",
		"%%",
		"/",
		"|",
		"\\",
		"&",
		"^"
	}

	splitBy = splitSymbols[splitIndex + 1]
	words = SplitString(inText, splitBy)
	outTab = TableSlice(words, 1, wordIndex)
	outText = table.concat(outTab, concatText)

	OutText:Set(req, Text(outText))
end
