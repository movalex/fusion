--[[--
Spilled

Based on https://www.shadertoy.com/view/MsGSRd Erstellt von flockaroo am 2016-06-15


V0.1 Recursiv BufferA Shadertoy
V0.2 
V0.3 
V0.4   
  
--]] --

--------------------------------
-- Registry declaration

FuRegisterClass("Spilled", CT_SourceTool, {
  REGS_Category      = "Fuses",
  REGS_OpIconString  = "Spill",
  REGS_OpDescription = "Titel",

  REG_NoObjMatCtrls      = true,
  REG_NoMotionBlurCtrls  = true,

  REG_Source_GlobalCtrls = true,
  REG_Source_SizeCtrls   = true,
  REG_Source_AspectCtrls = true,
  REG_Source_DepthCtrls  = true,
  --REG_OpNoMask           = true,
  REG_Fuse_NoEdit        = false,
  REG_Fuse_NoReload      = false,

  REG_TimeVariant        = true,
  REG_NoPreCalcProcess    = true,  -- call Process for precalc requests (instead of PreCalcProcess)
  REGS_Company           = "JiPi",
  REGS_URL               = "https://www.steakunderwater.com/wesuckless/",
  REG_Version            = 000001,
  })

version = "Spilled V0.1 - 04 Feb 2021"

-----------------------------------
-- Description of kernel parameters
-- //begin=glsl//
----------------BufferA--------------- 
BufferAParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float coordscor[2];
  float scale;
  float freq;
  bool reset;
  int width;
  int height;
  int frame;
  float itime;
  int compOrder;
]]


-- source of kernel
BufferAKernel =
    [[
//-----------------------
//-------- mat2 ---------
//-----------------------
 typedef struct  
  {  
  float2 r0, r1;  
  } mat2;  

 __DEVICE__ inline mat2 make_mat2( float2 A, float2 B)  
  {  
  mat2 C;  
  C.r0 = A;  
  C.r1 = B;  
  return C;  
  } 
  
 __DEVICE__ inline mat2 make_mat2_2( float A, float B, float C, float D)  
  {  
  mat2 E;  
  E.r0 = to_float2(A,B);  
  E.r1 = to_float2(C,D);  
  return E;  
  } 
 
 inline __host__ __device__ float2 operator*( mat2 B, float2 A) {  
    float2 C;  
    C.x = A.x * B.r0.x + A.y * B.r0.y;  
    C.y = A.x * B.r1.x + A.y * B.r1.y;  
    return C;  
  }
inline __host__ __device__ float2 operator*( float2 A, mat2 B) {  
    float2 C;  
    C.x = A.x * B.r0.x + A.y * B.r0.y;  
    C.y = A.x * B.r1.x + A.y * B.r1.y;  
    return C;  
  }
  
inline __host__ __device__ void operator*=( mat2 B, float2 &A) {  
    float2 C;  
    A.x *= A.x * B.r0.x + A.y * B.r0.y;  
    A.y *= A.x * B.r1.x + A.y * B.r1.y;  
  }
inline __host__ __device__ void operator*=( float2 &A, mat2 B) {  
    float2 C;  
    A.x *= A.x * B.r0.x + A.y * B.r0.y;  
    A.y *= A.x * B.r1.x + A.y * B.r1.y;  
  }

__DEVICE__ float fract1f(float A){return A - _floor(A);}

// created by florian berger (flockaroo) - 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License.

// single pass CFD
// ---------------
// this is some "computational flockarooid dynamics" ;)
// the self-advection is done purely rotational on all scales. 
// therefore i dont need any divergence-free velocity field. 
// with stochastic sampling i get the proper "mean values" of rotations 
// over time for higher order scales.
//
// try changing "RotNum" for different accuracies of rotation calculation
// for even RotNum uncomment the line #define SUPPORT_EVEN_ROTNUM

#define RotNum 5
//#define SUPPORT_EVEN_ROTNUM

//#define Res  iChannelResolution[0]
//#define Res1 iChannelResolution[1]

#define keyTex iChannel3
#define KEY_I _tex2DVecN(keyTex,to_float2((105.5f-32.0f)/256.0f,(0.5f+0.0f)/3.0f)).x

#define ang  (2.0f*3.1415926535f/(float)(RotNum))
//__DEVICE__ mat2 m = make_mat2_2(_cosf(ang),_sinf(ang),-_sinf(ang),_cosf(ang));
//__DEVICE__ mat2 mh = make_mat2_2(_cosf(ang*0.5f),_sinf(ang*0.5f),-_sinf(ang*0.5f),_cosf(ang*0.5f));

__DEVICE__ float4 randS(float2 uv, __TEXTURE2D__ iChannel1)
{
    //return _tex2DVecN(iChannel1,uv*Res/Res1)-to_float4(0.5f);
	return _tex2DVecN(iChannel1,uv.x,uv.y,15)-to_float4_s(0.5f);
}

__DEVICE__ float getRot(float2 pos, float2 b, float2 Res, __TEXTURE2D__ iChannel0)
{
    mat2 m = make_mat2_2(cos(ang),sin(ang),-sin(ang),cos(ang));

    float2 p = b;
    float rot=0.0f;
    for(int i=0;i<RotNum;i++)
    {
        rot+=dot(to_float2(_tex2DVecN(iChannel0,fract1f((pos.x+p.x)/Res.x),fract1f((pos.y+p.y)/Res.y),15).x,_tex2DVecN(iChannel0,fract1f((pos.x+p.x)/Res.x),fract1f((pos.y+p.y)/Res.y),15).y)-to_float2_s(0.5f),to_float2(p.y,p.x)*to_float2(1,-1));
        p = m*p;
    }
    return rot/(float)(RotNum)/dot(b,b);
} 


__DEVICE__ float2 spin(float2 uv, float2 center, float angle, float aspect)
{
    float C = _cosf(angle);
  float S = _sinf(angle);
   
  uv -= center;
  float x = uv.x;
  uv.x = (x*aspect * C - uv.y * S);
  uv.y = (x*aspect * S + uv.y * C);
  uv += center;
   
return uv;
} 

//############################################################################################################################
__KERNEL__ void BufferAKernel(__CONSTANTREF__ BufferAParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  //---------------------------------------
  if (x < params->width && y < params->height) 
  {
  
    //-----------------------
     float2 fragCoord = to_float2(x, y); 
     float2 iResolution = to_float2(params->width, params->height);
     float ratio = (float)params->width/(float)params->height;
     float itime=params->itime*params->freq;
     float4 fragColor = to_float4_s(0.0f);
     //-----------------------

    //Functionality.......

    float iFrame = params->frame;

    mat2 m = make_mat2_2(cos(ang),sin(ang),-sin(ang),cos(ang));

    float2 Res = iResolution;
    float2 Res1 = iResolution;

   
    float2 pos = to_float2(fragCoord.x+0.5f,fragCoord.y+0.5f);
    float rnd = params->freq*randS(to_float2((float)(iFrame)/Res.x,0.5f/Res1.y),iChannel1).x;
    
    float2 b = to_float2(_cosf(ang*rnd),_sinf(ang*rnd));
    float2 v=to_float2_s(0);
    float bbMax=0.7f*Res.y; bbMax*=bbMax;
    for(int l=0;l<20;l++)
    {
        if ( dot(b,b) > bbMax ) break;
        float2 p = b;
        for(int i=0;i<RotNum;i++)
        {
#ifdef SUPPORT_EVEN_ROTNUM
            v+=to_float2(p.y,p.x)*getRot(pos+p,-mh*b,Res,iChannel0)*params->freq;
#else
            // this is faster but works only for odd RotNum
            v+= to_float2(p.y,p.x)*getRot(pos+p,b,Res,iChannel0)*params->freq;
#endif
            p = m*p;
        }
        b*=2.0f;
    }
    
    fragColor=_tex2DVecN(iChannel0,fract1f((pos.x+v.x*-1*2.0f)/Res.x),fract1f((pos.y+v.y*1*2.0f)/Res.y),15);
    
    // add a little "motor" the center
    float2 scr=(fragCoord/Res)*2.0f-to_float2_s(1.0f);
    fragColor += to_float4_aw(to_float3_aw((0.01f*to_float2(scr.x,scr.y) / (dot(scr,scr)/0.1f+0.3f)),0.0f),0.0f);
    
    //if(iFrame<=4 || KEY_I>0.5f) fragColor=_tex2DVecN(iChannel2,fragCoord/Res);
	if(iFrame<=4 || params->reset) fragColor=_tex2DVecN(iChannel2,fragCoord.x/Res.x,fragCoord.y/Res.y,15);
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]



----------------Image--------------- 
ImageParams =
[[
  float center[2];
  float angle;
  float pivot[2];
  float debug;
  float scale;
  float freq;
  int width;
  int height;
  float itime;
  int compOrder;
]]


-- source of kernel
ImageKernel =
    [[
// created by florian berger (flockaroo) - 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0f Unported License.

// single pass CFD
// ---------------
// this is some "computational flockarooid dynamics" ;)
// the self-advection is done purely rotational on all scales. 
// therefore i dont need any divergence-free velocity field. 
// with stochastic sampling i get the proper "mean values" of rotations 
// over time for higher order scales.
//
// try changing "RotNum" for different accuracies of rotation calculation
// for even RotNum uncomment the line #define SUPPORT_EVEN_ROTNUM

__DEVICE__ float getVal(float2 uv, __TEXTURE2D__ iChannel0)
{
    return length(to_float3(_tex2DVecN(iChannel0,uv.x,uv.y,15).x,_tex2DVecN(iChannel0,uv.x,uv.y,15).y,_tex2DVecN(iChannel0,uv.x,uv.y,15).z));
}
    
__DEVICE__ float2 getGrad(float2 uv,float delta, __TEXTURE2D__ iChannel0)
{
    float2 d=to_float2(delta,0);
    return to_float2(
        getVal(uv+to_float2(d.x,d.y),iChannel0)-getVal(uv-to_float2(d.x,d.y),iChannel0),
        getVal(uv+to_float2(d.y,d.x),iChannel0)-getVal(uv-to_float2(d.y,d.x),iChannel0)
    )/delta;
}

//************************************************************************
__KERNEL__ void ImageKernel(__CONSTANTREF__ ImageParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ dst)
{
  DEFINE_KERNEL_ITERATORS_XY(x, y);
  if (x < params->width && y < params->height) 
  {
  
    //-----------------------
    float2 fragCoord = to_float2(x, y); 
    float2 iResolution = to_float2(params->width, params->height);
    float ratio = (float)params->width/(float)params->height;
    float itime=params->itime*params->freq;
    float4 fragColor = to_float4_s(0.0f);
    //-----------------------

    //Functionality.......
	float2 uv = fragCoord / iResolution;
    float3 n = to_float3_aw(getGrad(uv,1.0f/iResolution.y,iChannel0),150.0f);
    //n *= n;
    n=normalize(n);
    fragColor=to_float4_aw(n,1);
    float3 light = normalize(to_float3(1,1,2));
    float diff=_clampf(dot(n,light),0.5f,1.0f);
    float spec=_clampf(dot(reflect(light,n),to_float3(0,0,-1)),0.0f,1.0f);
    spec=_powf(spec,36.0f)*2.5f;
      //spec=0.0f;
	fragColor = _tex2DVecN(iChannel0,uv.x,uv.y,15)*to_float4_s(diff)+to_float4_s(spec);
	fragColor.w = 1.0f;
    _tex2DVec4Write(dst, x, y, fragColor);
  }
}
]]


-- //end=glsl//

Logo_On = false
if (Logo_On) then
	BrandLogo = [[
	<center><a href="https://www.steakunderwater.com/wesuckless/viewtopic.php?f=45&t=4597"><img width="320" height="60" src='data:image/png;base64,
	
	</center>'/></a>    
	]]
end
-------------------------------------------------------------------
--       Create
-------------------------------------------------------------------

function Create()
if (Logo_On) then
  InLogo = self:AddInput(BrandLogo, "Label", {
	LINKID_DataType = "Text",
	INPID_InputControl = "LabelControl",
	LBLC_MultiLine = true,
	IC_NoLabel = true,
	IC_NoReset = true,
	INP_External = false,
	INP_Passive = true,
	IC_ControlPage = -1,
	})
end

  Sep1 = self:AddInput(string.rep("_", 52), "Separator1", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
  })

  --------------- BufferA ---------------
  InCenter = self:AddInput("Center", "Center", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    INP_DoNotifyChanged = true,
	IC_Visible          = false,
    })

  InScale = self:AddInput("Scale", "Scale", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center        = "Center", 
    INP_Default = 1.0,
    INP_MinAllowed = 0.1,
    INP_MaxAllowed = 5.0,
	IC_Visible          = false,
    })

  InDebug = self:AddInput("Debug", "Debug", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinScale = 0.0,
    --INP_MaxScale = 5.0,
    --INPID_PreviewControl = "RectangleControl",
    RCD_LockAspect     = 1,
    RC_DoLockAspect    = true,
    RCID_Center = "Center",    
    IC_Visible          = false, 
  })

  InAngle = self:AddInput("Angle", "Angle", {
    LINKID_DataType = "Number",
    INPID_InputControl = "ScrewControl",
    INPID_PreviewControl = "AngleControl",
    --INP_MinAllowed =   0.0,
    INP_MinScale = 0.0,
	INP_MaxScale = 360.0,
    INP_Default = 0.0,
    ACID_Center = "Center",
	IC_Visible          = false,
    --PC_GrabPriority = 1 -- give this a higher priority than the rectangle
    })    
  InPivot = self:AddInput("Pivot", "Pivot", {
    LINKID_DataType = "Point",
    INPID_InputControl = "OffsetControl",
    INPID_PreviewControl = "CrosshairControl",
    CHC_Style = "DiagonalCross",
    PC_GrabPriority = -1,
	IC_Visible          = false,
    })
  InWidgets = self:AddInput("On-Screen Widgets", "OnScreen Widgets", {
    LINKID_DataType = "Number",
    INPID_InputControl = "MultiButtonControl",
    INP_Default = 0,
    INP_Integer = true,
    INP_External        = false,
	INP_Passive         = true,
    INP_DoNotifyChanged = true, 
    MBTNC_ForceButtons = true,
    MBTNC_StretchToFit = true,
    { MBTNC_AddButton = "Show", },
    { MBTNC_AddButton = "Hide", },
	IC_Visible          = false,
  })


  Sep2 = self:AddInput(string.rep("_", 52), "Separator2", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
	IC_Visible          = false,
  })

  InFrequency = self:AddInput("Frequency", "Frequency", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 1.0,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })

  InStop = self:AddInput("Stop", "Stop", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    IC_Visible          = false,
    --INP_External        = false,
  })
  InStartStop = self:AddInput("", "StartStop", {
    { MBTNC_AddButton = "Stop", MBTNCID_AddID = "StopAnimation", },
    { MBTNC_AddButton = "Start", MBTNCID_AddID = "StartAnimation", },
    INPID_DefaultID = "StartAnimation",
    LINKID_DataType = "FuID",
    INPID_InputControl = "MultiButtonIDControl",
    ICD_Width = 1.0,
    MBTNC_StretchToFit = true,
    MBTNC_ForceButtons = true,
    INP_DoNotifyChanged  = true,
    IC_Visible = false,
    --INP_External = false,
  })
  
  
  InActtime = self:AddInput("Acttime", "Acttime", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })
  
  InTimeoffset = self:AddInput("Timeoffset", "Timeoffset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.0,
	IC_Visible          = false,
    --INP_MinAllowed = -1.0,
    --INP_MaxAllowed = 1.0,
    })   

  InReset = self:AddInput("Reset", "Reset", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 0,
    INP_External        = false,
  })


if (Logo_On) then
   InLogoSw = self:AddInput("Logo", "LogoSw", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
	INP_Integer = true,
    INP_DoNotifyChanged = true,
    INP_Default         = 1,
    IC_Visible          = true,
    INP_External        = false,
	INP_Passive         = true,
  })
end

  InLabel = self:AddInput(version, "version", {
    LINKID_DataType = "Text",
    INPID_InputControl = "LabelControl",
    INP_External = false,
    INP_Passive = true,
    ICD_Width = 1,
  })
--------------------------------------------


--------------------------------------------
------------------- In/Out -----------------
  InImage1 = self:AddInput("Image", "Image", {
    LINKID_DataType = "Image",
	LINK_Visible = false,
    LINK_Main = 1,
    INP_Required = false
  })
  
  InImage2 = self:AddInput("Image2", "Image2", {
    LINKID_DataType = "Image",
    LINK_Main = 2,
    INP_Required = false
  })
  InImage3 = self:AddInput("Image3", "Image3", {
    LINKID_DataType = "Image",
    LINK_Main = 3,
    INP_Required = false
  })
  
  InImage4 = self:AddInput("Image4", "Image4", {
    LINKID_DataType = "Image",
    LINK_Main = 4,
    INP_Required = false
  })

  OutImage = self:AddOutput("Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })
end 


-------------------------------------------------------------------
--       NotifyChanged
-------------------------------------------------------------------
function NotifyChanged(inp, param, time)

  if inp ~= nil and param ~= nil then
  
    if inp == InCenter then
        -- the center moved, reposition the axis according to the current offset
        nCenterX = param.X
        nCenterY = param.Y
      
        InPivot:SetAttrs({
            PCD_OffsetX = nCenterX - 0.5,
            PCD_OffsetY = nCenterY - 0.5,
            })
           
        InAngle:SetAttrs({
            PCD_OffsetX = (nCenterX - 0.5)/100,
            PCD_OffsetY = (nCenterY - 0.5)/100,
            })
    end
    if inp == InWidgets then  
      if param.Value == 1.0 then
         InCenter:SetAttrs({ PC_Visible = false })
         InAngle:SetAttrs({ PC_Visible = false })
         InPivot:SetAttrs({ PC_Visible = false })
         InScale:SetAttrs({ PC_Visible = false })
      else
         InCenter:SetAttrs({ PC_Visible = true })
         InAngle:SetAttrs({ PC_Visible = true })
         InPivot:SetAttrs({ PC_Visible = true })
         InScale:SetAttrs({ PC_Visible = true })
      end
    end
	
    if inp == InStop then  
      if param.Value == 1 then
	     InActtime:SetAttrs({IC_Visible = true})
	  else
	     InActtime:SetAttrs({IC_Visible = false})
	  end
	end  

    if (Logo_On) then
    if inp == InLogoSw then  
      if param.Value == 1 then
         InLogo:SetAttrs({IC_Visible = true})
      else
	     InLogo:SetAttrs({IC_Visible = false})
	  end
	end 
    end 
  end
end

-------------------------------------------------------------------
--       Process
-------------------------------------------------------------------
imgattrs = {
        --IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
		IMG_DeferAlloc = false,
    }
R_img = Image(imgattrs)	


function Process(req)
    local center = InCenter:GetValue(req)
    local angle = -InAngle:GetValue(req).Value/360*3.1415*2
    local debug = InDebug:GetValue(req).Value
    local scale = InScale:GetValue(req).Value
    local freq = InFrequency:GetValue(req).Value
    local framerate = self.Comp:GetPrefs("Comp.FrameFormat.Rate") -- get the frame rate of the comp set in the preferences


    --This creates an image for us to work on.
    local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
        IMG_XScale = XAspect,
        IMG_YScale = YAspect,
        IMAT_OriginalWidth = realwidth,
        IMAT_OriginalHeight = realheight,
        IMG_Quality = not req:IsQuick(),
        IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
        }
   
    if not req:IsStampOnly() then
        imgattrs.IMG_ProxyScale = 1
    end
   
    if SourceDepth ~= 0 then
        imgattrs.IMG_Depth = SourceDepth
    end
    
    local p = Pixel({R=0,G=0,B=0,A=0})
    
      if (InImage1:GetValue(req) ~= nil) then
         src1 = InImage1:GetValue(req)
      else
         src1 = Image(imgattrs)
         src1:Fill(p)
      end
	  if (InImage2:GetValue(req) ~= nil) then
         src2 = InImage2:GetValue(req)
      else
         src2 = Image(imgattrs)
         src2:Fill(p)
      end
      if (InImage3:GetValue(req) ~= nil) then
         src3 = InImage3:GetValue(req)
      else
         src3 = Image(imgattrs)
         src3:Fill(p)
      end
      if (InImage4:GetValue(req) ~= nil) then
         src4 = InImage4:GetValue(req)
      else
         src4 = Image(imgattrs)
         src4:Fill(p)
      end  
	  

    local dstA = Image {IMG_Like = src1, IMG_DeferAlloc = true}
	local dstI = Image {IMG_Like = src1, IMG_DeferAlloc = true}


    if req:IsPreCalc() then
	   --print("\n######################### Precalc ##############################\n")
	   local out = Image({IMG_Like = dstI, IMG_NoData = true})
       OutImage:Set(req, out)
	   return
	end


    --StartStop	
    if InStop:GetValue(req).Value == 0 then             
	   _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   startstopsema = 1
	else
	   if startstopsema == 1 then
	      InActtime:SetSource(Number(req.Time),0)
	      startstopsema = 0
	      _acttime = req.Time + InTimeoffset:GetValue(req).Value
	   else
	      _acttime = InActtime:GetValue(req).Value + InTimeoffset:GetValue(req).Value
	   end	
	end

    acttime = _acttime / framerate

  
    -------------------------- BufferA-Kernel----------------------------------------
    nodeA = DVIPComputeNode(req, "BufferAKernel", BufferAKernel, "BufferAParams", BufferAParams)
    
	local params = {}
    if not pcall(function () 
        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
	    params.freq = freq
		params.reset = InReset:GetValue(req).Value
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate
		params.frame  = req.Time
    
        nodeA:SetParamBlock(params)
    end) then
        params = nodeA:GetParamBlock(BufferAParams)
    
        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
	    params.freq = freq
		params.reset = InReset:GetValue(req).Value
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate
        params.frame  = req.Time  
		
        nodeA:SetParamBlock(params)
    
    end

    nodeA:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    nodeA:AddInput("iChannel0", R_img)
	nodeA:AddInput("iChannel1", src2)
	nodeA:AddInput("iChannel2", src3)
	nodeA:AddInput("iChannel3", src4)
    nodeA:AddOutput("dst", dstA)

    local success = nodeA:RunSession(req)
    if not success then
        dstA = nil
        dump(nodeA:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    R_img = dstA --Recursiv Image



    -------------------------- ImageKernel----------------------------------------
    
    node = DVIPComputeNode(req, "ImageKernel", ImageKernel, "ImageParams", ImageParams)
	local params = {}
    if not pcall(function () 
        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
        params.freq = freq
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate
    
        node:SetParamBlock(params)
    end) then
        params = node:GetParamBlock(ImageParams)
    
        params.center = {center.X,center.Y}
        params.scale = 1/scale
        params.angle = angle
        params.pivot = {InPivot:GetValue(req).X,InPivot:GetValue(req).Y}
        params.debug = debug
        params.freq = freq
        params.compOrder = src1:IsMask() and 1 or 15
        params.width  = src1.DataWindow:Width()
        params.height = src1.DataWindow:Height()
        params.itime = acttime --req.Time / framerate

        node:SetParamBlock(params)
    
    end

    node:AddSampler("RowSampler", TEX_FILTER_MODE_LINEAR,TEX_ADDRESS_MODE_MIRROR, TEX_NORMALIZED_COORDS_TRUE)

    node:AddInput("iChannel0", R_img)
	node:AddInput("iChannel1", src2)
	node:AddInput("iChannel2", src3)
	node:AddInput("iChannel3", src4)
    node:AddOutput("dst", dstI)

    local success = node:RunSession(req)
    if not success then
        dstI = nil
        dump(node:GetErrorLog()) -- Fehlerausgabe des DCTL
    end

    OutImage:Set(req, dstI)
	collectgarbage();
end




