--[[--

ShaderToyNode - in theory by a little bit of fancy recoding and processing we
should be able to make a GPU accelerated fuse that can process shadertoy scripts.
In practice, who knows :)

Chris Ridings
www.chrisridings.com

--]]--


FuRegisterClass("ShaderToy", CT_SourceTool, {
    REGS_Name = "Shader Toy", 
	REGS_Category = "Fuses",	
    REGS_OpDescription = "ShaderToy",
	REGS_OpIconString = "fST",
    REG_Source_GlobalCtrls = true,
    REG_Source_SizeCtrls = true,
    REG_Source_AspectCtrls = true,    
	REG_TimeVariant = true,	
	REGS_Company = "Chris Ridings",
	REGS_URL = "https://www.chrisridings.com",	
	REG_Version	= 000001,
    })
	

function Create()
	SiteButton = self:AddInput("Visit www.chrisridings.com", "Label1", {
		LINKID_DataType = "Text",
		INPID_InputControl = "ButtonControl",
		INP_DoNotifyChanged = true,
		INP_External = false,
	})	
	YouTubeButton = self:AddInput("Visit the Youtube Channel", "Label2", {
		LINKID_DataType = "Text",
		INPID_InputControl = "ButtonControl",
		INP_External = false,
	})	
	InLabelAdv = self:AddInput("Version 0.0.1", "LabelAdv", {
		LINKID_DataType = "Text",
		INPID_InputControl = "LabelControl",
		INP_External = false,
		INP_Passive = true,
	})
	InFile = self:AddInput("File", "File", {
		LINKID_DataType = "Text",
		INPID_InputControl =  "FileControl",
		FC_ClipBrowse = true,
		INP_DoNotifyChanged = true, 
		INP_Passive = true,
		})	
	InFrameRate = self:AddInput("Frame Rate", "FrameRate", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_Integer = false,		
		INP_Default = 30,
		INP_MinScale = 24,
		INP_MaxScale = 240,
	})	
	InLabelB = self:AddInput("Following must be unique for", "LabelAdvB", {
		LINKID_DataType = "Text",
		INPID_InputControl = "LabelControl",
		INP_External = false,
		INP_Passive = true,
	})	
	InLabelC = self:AddInput("each Shadertoy node", "LabelAdvBC", {
		LINKID_DataType = "Text",
		INPID_InputControl = "LabelControl",
		INP_External = false,
	})	
	InUniqueID = self:AddInput("UniqueID", "UniqueID", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_Integer = true,		
		INP_Default = 1,
		INP_MinScale = 1,
		INP_MaxScale = 100,
	})		
	InChannel0 = self:AddInput("iChannel0", "iChannel0", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		INP_Required = false
		})		
	InChannel1 = self:AddInput("iChannel1", "iChannel1", {
		LINKID_DataType = "Image",
		LINK_Main = 2,
		INP_Required = false		
		})	
	InChannel2 = self:AddInput("iChannel2", "iChannel2", {
		LINKID_DataType = "Image",
		LINK_Main = 3,
		INP_Required = false		
		})	
	InChannel3 = self:AddInput("iChannel3", "iChannel3", {
		LINKID_DataType = "Image",
		LINK_Main = 4,
		INP_Required = false		
		})	
	self:BeginControlNest("Virtual Mouse", "Mouse", true, {})	
		MousePoint = self:AddInput("Location", "MouseXY", {
			LINKID_DataType = "Point",
			INPID_InputControl = "OffsetControl",
			INPID_PreviewControl = "CrosshairControl",	
		})
		MouseButton = self:AddInput("Button", "MouseButton", {
			LINKID_DataType = "Number",
			INPID_InputControl = "CheckboxControl",
			INP_Default = 0,
			INP_MinScale = 0,
			INP_MaxScale = 1,
		})	
	self:EndControlNest()				
	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		INP_Required = false			
		})	
	self:AddControlPage("Variables")
		self:BeginControlNest("Floats", "Floats", false, {})		
			InFloat1 = self:AddInput("p_Float1", "pFloat1", {
				LINKID_DataType = "Number",
				INPID_InputControl = "SliderControl",
				INP_Integer = false,		
				INP_Default = 0,
				INP_MinScale = -100,
				INP_MaxScale = 100,
				PC_Visible =  false,
			})
			InFloat2 = self:AddInput("p_Float2", "pFloat2", {
				LINKID_DataType = "Number",
				INPID_InputControl = "SliderControl",
				INP_Integer = false,		
				INP_Default = 0,
				INP_MinScale = -100,
				INP_MaxScale = 100,
				PC_Visible =  false,
			})	
			InFloat3 = self:AddInput("p_Float3", "pFloat3", {
				LINKID_DataType = "Number",
				INPID_InputControl = "SliderControl",
				INP_Integer = false,		
				INP_Default = 0,
				INP_MinScale = -100,
				INP_MaxScale = 100,
				PC_Visible =  false,
			})			
		self:EndControlNest()
	self:AddControlPage("Shader Developer")		
		self:BeginControlNest("Debugging", "Development", false, {})	
			Rewrites = self:AddInput("Dump Kernel Rewrites", "Rewrites", {
				LINKID_DataType = "Number",
				INPID_InputControl = "CheckboxControl",
				INP_Default = 0,
				INP_MinScale = 0,
				INP_MaxScale = 1,
			})		
			Debugs = self:AddInput("Dump Kernel Debug Logs", "Debug", {
				LINKID_DataType = "Number",
				INPID_InputControl = "CheckboxControl",
				INP_Default = 0,
				INP_MinScale = 0,
				INP_MaxScale = 1,
			})	
		self:EndControlNest()	
		UseDevShader = self:AddInput("Use this Code as Shader", "UseDevShader", {
			LINKID_DataType = "Number",
			INPID_InputControl = "CheckboxControl",
			INP_Default = 0,
			INP_MinScale = 0,
			INP_MaxScale = 1,
		})	
		InDevShader = self:AddInput("", "DevelopmentShader", {
			LINKID_DataType = "Text",
			INPID_InputControl = "TextEditControl",
			INP_DoNotifyChanged  = true,
			INP_External = false,
			IC_NoLabel = true,
			ICD_Width = 1.1,
			INPS_DefaultText = "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= .5;\n\tuv.x *= iResolution.x/iResolution.y;\n\n\tfragColor = vec4(uv,0,1);\n}",  -- use instead of INP_Default!
			TEC_Lines = 40,               -- height of text entry (default is 8)
			TEC_Wrap = true,             -- automatic word-wrapping (default is false)
			TEC_ReadOnly = false,         -- default is false (you should also set INP_External = false)
			TEC_CharLimit = 0,	     -- maximum number of allowed characters (default is 0, no limit)
			TEC_DeferSetInputs = false,   -- call NotifyChanged when focus is lost (default is false, call on every key stroke)
			})	
		DevCacheDirty = self:AddInput("Cache Dirty", "CacheDirty", {
			LINKID_DataType = "Number",
			INPID_InputControl = "CheckboxControl",
			INP_Default = 0,
			INP_MinScale = 0,
			INP_MaxScale = 1,
		})			
	self:EndControlNest()
		
	local thistool = ffi.string(self.RegNode.m_ID);
	self:SetData(thistool.."MouseState",0)
	self:SetData(thistool.."LastClickX",0)
	self:SetData(thistool.."LastClickY",0)		
end

ShaderToyParams = [[
	int width;
	int height;
	float itime;
	int ic0width;
	int ic0height;
	int ic1width;
	int ic1height;
	int ic2width;
	int ic2height;
	int ic3width;
	int ic3height;
	float mousex;
	float mousey;
	float mousew;
	float mousez;
	int mousebutton;
	float p_Float1;
	float p_Float2;
	float p_Float3;
]]

ShaderToyKernelA = [[

	__DEVICE__ __TEXTURE2D__ iChannel0;
	__DEVICE__ __TEXTURE2D__ iChannel1;
	__DEVICE__ __TEXTURE2D__ iChannel2;
	__DEVICE__ __TEXTURE2D__ iChannel3;
	
	__DEVICE__ struct par {
		int width;
		int height;
		float itime;
		int ic0width;
		int ic0height;
		int ic1width;
		int ic1height;
		int ic2width;
		int ic2height;
		int ic3width;
		int ic3height;
		float p_Float1;
		float p_Float2;
		float p_Float3;
	};
	__DEVICE__ par paramsin;	

	class mat2;

	// Define vec2, vec3, and vec4 (they're a bit like float2, float3, float4, but with some oddities and different comparisons)
	// VEC2
	template<unsigned int I>
	struct scalar_swizzle
	{
		float v[1];
		__DEVICE__ float &operator=(const float x)
		{			
			v[I] = x;
			return v[I];
		}
		__DEVICE__ operator float() const
		{
			return v[I];
		}
		__DEVICE__ float operator++(int)
		{
			return v[I]++;
		}
		__DEVICE__ float operator++()
		{
			return ++v[I];
		}
		__DEVICE__ float operator--(int)
		{
			return v[I]--;
		}
		__DEVICE__ float operator--()
		{
			return --v[I];
		}			
		__DEVICE__ float operator += (const double x)
		{
			v[I] = v[I] + x;
			return v[I];
		}
		__DEVICE__ float operator -= (const double x)
		{
			v[I] = v[I] - x;
			return v[I];
		}		
		__DEVICE__ float operator *= (const float q)
		{		
			v[I] = v[I] * q;
			return v[I];
		}
	};
	template<typename vec_type, unsigned int A, unsigned int B>
	struct vec2_swizzle
	{
		float d[2];
		__DEVICE__ vec_type operator=(const vec_type& vec)
		{	
			return vec_type(d[A] = vec.x, d[B] = vec.y);
		}
		__DEVICE__ operator vec_type()
		{
			return vec_type(d[A], d[B]);
		}
		__DEVICE__ vec_type operator / (const vec_type& vec)
		{
			return vec_type(d[A] / vec.x, d[B] / vec.y);
		}			
		__DEVICE__ vec_type operator *= (const double& i)
		{	
			d[A] = d[A] * i;
			d[B] = d[B] * i;
			return vec_type(d[A], d[B]);
		}	
		__DEVICE__ vec_type operator * (const double& i)
		{					
			return vec_type(d[A] * i, d[B] * i);
		}
		__DEVICE__ vec_type operator * (const float& i)
		{					
			return vec_type(d[A] * i, d[B] * i);
		}	
		__DEVICE__ vec_type operator / (const float& i)
		{
			return vec_type(d[A] / i, d[B] / i);
		}
		__DEVICE__ vec_type operator *= (const mat2& i)
		{	
			float t = d[A];
			float s = d[B];
			t = ((d[A] * i.m[0][0]) + (d[B] * i.m[0][1]));
			s = ((d[A] * i.m[1][0]) + (d[B] * i.m[1][1]));
			d[A] = t;
			d[B] = s;
			return vec_type(t, s);
		}	
		__DEVICE__ operator float2() const {		
			return to_float2(d[A],d[B]);
		}
	};
	__DEVICE__ struct vec2
	{
		union
		{
			float d[2];
			scalar_swizzle<0> x, r, s;
			scalar_swizzle<1> y, g, t;
			vec2_swizzle<vec2, 0, 1> xy;
			vec2_swizzle<vec2, 0, 0> xx;
			vec2_swizzle<vec2, 1, 1> yy;
			vec2_swizzle<vec2, 1, 0> yx;
		};
		__DEVICE__ vec2() {}
		__DEVICE__ vec2(float all)
		{
			x = y = all;
		}
		__DEVICE__ vec2(float a, float b)
		{
			x = a;
			y = b;			
		}
		__DEVICE__ vec2(float2 a) {
			x = a.x;
			y = a.y;
		}	
		__DEVICE__ vec2 operator = (const vec2 v) {
			x = v.d[0];
			y = v.d[1];		
			return *this;
		}
		__DEVICE__ vec2 operator - (const float i) {
			return vec2(x - i, y - i);
		}
		__DEVICE__ vec2 operator *= (const double i) {		
			x = x * i;
			y = y * i;
			return *this;
		}	
		__DEVICE__ vec2 operator += (const vec2& i) {
			x = x + i.x;
			y = y + i.y;
			return *this;
		}
		__DEVICE__ vec2 operator -= (const vec2& i) {
			x = x - i.x;
			y = y - i.y;
			return *this;
		}	
		__DEVICE__ vec2 operator /= (const double& i) {
			x = x / i;
			y = y / i;
			return *this;
		}
		__DEVICE__ vec2 operator / (const vec2& i) {			
			return vec2(x/i.x,y/i.y);
		}		
		__DEVICE__ bool operator == (const vec2 i) {
			if (x == i.d[0] && y == i.d[1]) {
				return true;
			}
			return false;
		}			
		__DEVICE__ operator float2() const {
			return to_float2(x,y);
		}		
	};	
	
	// VEC3
	template<typename vec_type, unsigned int A, unsigned int B, unsigned int C>
	struct vec3_swizzle
	{
		float d[3];
		__DEVICE__ vec_type operator=(const vec_type& vec)
		{
			return vec_type(d[A] = vec.x, d[B] = vec.y, d[C] = vec.z);
		}
		__DEVICE__ operator vec_type()
		{
			return vec_type(d[A], d[B], d[C]);
		}
		__DEVICE__ vec_type operator * (const double& i)
		{
			return vec_type(d[A] * i, d[B] * i, d[C] * i);
		}		
		__DEVICE__ vec_type operator *= (const float& i)
		{
			d[A] = d[A] * i;
			d[B] = d[B] * i;
			d[C] = d[C] * i;
			return *this;
		}			
	};
	__DEVICE__ struct vec3
	{
		union
		{
			float d[3];
			scalar_swizzle<0> x, r, s;
			scalar_swizzle<1> y, g, t;
			scalar_swizzle<2> z, b, p;
			vec2_swizzle<vec2, 0, 1> xy;
			vec2_swizzle<vec2, 1, 2> yz;
			vec2_swizzle<vec2, 0, 2> xz;
			vec2_swizzle<vec2, 0, 1> rg;
			vec3_swizzle<vec3, 0, 1, 2> xyz;
			vec3_swizzle<vec3, 2, 1, 0> zyx;
		};
		__DEVICE__ vec3() {}
		__DEVICE__ vec3(float all)
		{
			x = y = z = all;
		}
		__DEVICE__ vec3(float a, float b, float c)
		{
			x = a;
			y = b;
			z = c;
		}
		__DEVICE__ vec3(float2 a, double b)
		{
			x = a.x;
			y = a.y;
			z = b;
		}		
		__DEVICE__ vec3(float a, vec2 b)
		{
			x = a;
			y = b.x;
			z = b.y;
		}		
		__DEVICE__ vec3(vec2 a) {
			x = a.x;
			y = a.y;
			z = 0;
		}
		//__DEVICE__ vec3(float a) {
			// I think when a float is assigned then we have to calculate
			// back the vector
			//const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
			//return ((x * 1) + (y * 1/255) + (z * 1/65025));
		//	float p = a * 256;
		//	x = _fmod(p,256);
		//	y = _fmod(p / 256, 256);
		//	z = p / 256 / 256;
		//}
		__DEVICE__ vec3 operator += (const float& i) {
			x = x + i;
			y = y + i;
			z = z + i;
			return *this;
		}
		__DEVICE__ vec3 operator *= (const double& i) {
			x = x * i;
			y = y * i;
			z = z * i;
			return *this;
		}		
		__DEVICE__ vec3 operator -= (const vec3& i) {
			x = x - i.x;
			y = y - i.y;
			z = z - i.z;
			return *this;
		}	
		__DEVICE__ vec3 operator += (const vec3 i) {
			x = x + i.x;
			y = y + i.y;
			z = z + i.z;
			return *this;
		}
		__DEVICE__ vec3 operator * (const float& i) {
			return vec3(x * i, y * i, z * i);
		}
		__DEVICE__ vec3 operator * (const vec3& i) {
			return vec3(x * i.x, y * i.y, z * i.z);
		}	
		__DEVICE__ vec3 operator - (const vec3& i) {
			return vec3(x - i.x, y - i.y, z - i.z);
		}	
		__DEVICE__ vec3 operator + (const vec3& i) {
			return vec3(x + i.x, y + i.y, z + i.z);
		}	
		__DEVICE__ vec3 operator / (const vec3& i) {
			return vec3(x / i.x, y / i.y, z / i.z);
		}	
		__DEVICE__ vec3 operator / (const float& i) {
			return vec3(x / i, y / i, z / i);
		}		
		//__DEVICE__ operator float() const {
		//	//const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
		//	return ((x * 1/255) + (y * 1/65025) + (z * 1/16581375));		
		//}
		__DEVICE__ operator vec2() const {
			return vec2(x,y);
		}
	};	
	
	
	// VEC4
	template<typename vec_type, unsigned int A, unsigned int B, unsigned int C, unsigned int D>
	struct vec4_swizzle
	{
		float d[4];
		__DEVICE__ vec_type operator=(const vec_type& vec)
		{
			return vec_type(d[A] = vec.x, d[B] = vec.y, d[C] = vec.z, d[D] = vec.w);
		}
		__DEVICE__ operator vec_type()
		{
			return vec_type(d[A], d[B], d[C], d[D]);
		}
	};
	__DEVICE__ struct vec4
	{
		union
		{
			float d[4];
			scalar_swizzle<0> x, r, s;
			scalar_swizzle<1> y, g, t;
			scalar_swizzle<2> z, b, p;
			scalar_swizzle<3> w, a, q;
			vec2_swizzle<vec2, 0, 1> xy;
			vec2_swizzle<vec2, 1, 2> yz;
			vec3_swizzle<vec3, 0, 1, 2> xyz;
			vec3_swizzle<vec3, 2, 1, 0> zyx;
			vec3_swizzle<vec3, 0, 1, 2> rgb;
			vec4_swizzle<vec4, 0, 1, 2, 3> xyzw;
			vec4_swizzle<vec4, 0, 1, 2, 3> rgba;
		};
		__DEVICE__ vec4() {}
		__DEVICE__ vec4(float all)
		{
			x = y = z = w = all;
		}
		__DEVICE__ vec4(float a, float b, float c, float d)
		{
			x = a;
			y = b;
			z = c;
			w = d;
		}
		__DEVICE__ vec4(vec3 q, double b) {
			x = q.d[0];
			y = q.d[1];
			z = q.d[2];
			w = b;
		}
		__DEVICE__ vec4(vec3 q) {
			x = q.d[0];
			y = q.d[1];
			z = q.d[2];
		}	
		__DEVICE__ vec4(float4 f) {
			x = f.x;
			y = f.y;
			z = f.z;
			w = f.w;
		}
		//__DEVICE__ vec4(double i) {
		//	x = i;
		//	y = i;
		//	z = i;
		//	w = i;
		//}
		__DEVICE__ vec4(vec2 q, double i, double j) {
			x = q.d[0];
			y = q.d[1];
			z = i;
			w = j;
		}		
		__DEVICE__ operator float4() const {
			return to_float4(x,y,z,w);
		}
		__DEVICE__ vec4 operator *= (const vec3 i) {
			x = x * i.x;
			y = y * i.y;
			z = z * i.z;
			return *this;
		}		
		__DEVICE__ vec4 operator += (const vec4 i) {
			x = x + i.x;
			y = y + i.y;
			z = z + i.z;
			w = w + i.w;
			return *this;
		}	
		__DEVICE__ vec4 &operator=(const float4 i)
		{
			x = i.x;
			y = i.y;
			z = i.z;
			w = i.w;
			return *this;
		}
		__DEVICE__ vec4 &operator=(const vec4 i)
		{
			x = i.d[0];
			y = i.d[1];
			z = i.d[2];
			w = i.d[3];
			return *this;
		}		
		__DEVICE__ vec4 &operator=(const vec3 i)
		{
			x = i.x;
			y = i.y;
			z = i.z;	
			w = 1;
			return *this;
		}
		__DEVICE__ operator vec3() const {
			return vec3(x,y,z);
		}
	};	

	__DEVICE__ class mat2 {
		public:
			float m[2][2];
			__DEVICE__ mat2() {
			}
			__DEVICE__ mat2(float a) {
				m[0][0] = a;
				m[0][1] = a;
				m[1][0] = a;
				m[1][1] = a;
			}			
			__DEVICE__ mat2(double a) {
				m[0][0] = a;
				m[0][1] = a;
				m[1][0] = a;
				m[1][1] = a;
			}			
			__DEVICE__ mat2(double a, double b, double c, double d) {
				m[0][0] = (float)a;
				m[0][1] = (float)b;
				m[1][0] = (float)c;
				m[1][1] = (float)d;
			}
			__DEVICE__ mat2(float a, float b, float c, float d) {
				m[0][0] = a;
				m[0][1] = b;
				m[1][0] = c;
				m[1][1] = d;
			}
			__DEVICE__ mat2(float a, double b, double c, float d) {
				m[0][0] = a;
				m[0][1] = b;
				m[1][0] = c;
				m[1][1] = d;
			}			
			__DEVICE__ vec2 operator * (const vec2& i) {
				return vec2((m[0][0] * i.x) + (m[0][1] * i.y), (m[1][0] * i.x) + (m[1][1] * i.y));
			}	
	};	
		
	
	__DEVICE__ vec2 fragCoord; // The co-ordinates, we only support 2 dimensional for now
	__DEVICE__ vec4 fragColor; // The color (returned from mainImage)
	__DEVICE__ vec2 iResolution; // Output size
	__DEVICE__ vec4 iMouse; // Virtual mouse location!
	__DEVICE__ float iTime = 0; // These two items indicate elapsed time
	__DEVICE__ float iGlobalTime = 0;		
	
	
	__DEVICE__ vec4 texture(int chan , vec2 position, float bias=0) {
		// Just assume the image is the same size as the output texture.
		float4 res;
		if (position.x < 0) { position.x = position.x * -1; }
		if (position.y < 0) { position.y = position.y * -1; }
		if (chan == 0) {
			float ex = fragCoord.x;
			float ey = fragCoord.y;
			res = _tex2DVecN(iChannel0, _fmod(position.x * paramsin.ic0width,paramsin.ic0width), _fmod(position.y * paramsin.ic0height,paramsin.ic0height), 0);
			fragCoord.x = ex;
			fragCoord.y = ey;
		}
		if (chan == 1) {
			float ex = fragCoord.x;
			float ey = fragCoord.y;
			res = _tex2DVecN(iChannel1, _fmod(position.x * paramsin.ic1width,paramsin.ic1width), _fmod(position.y * paramsin.ic1height,paramsin.ic1height), 0);
			fragCoord.x = ex;
			fragCoord.y = ey;
		}
		if (chan == 2) {
			float ex = fragCoord.x;
			float ey = fragCoord.y;
			res = _tex2DVecN(iChannel2, _fmod(position.x * paramsin.ic2width,paramsin.ic2width), _fmod(position.y * paramsin.ic2height,paramsin.ic2height), 0);
			fragCoord.x = ex;
			fragCoord.y = ey;
		}
		if (chan == 3) {
			float ex = fragCoord.x;
			float ey = fragCoord.y;
			res = _tex2DVecN(iChannel3, _fmod(position.x * paramsin.ic3width,paramsin.ic3width), _fmod(position.y * paramsin.ic3height,paramsin.ic3height), 0);
			fragCoord.x = ex;
			fragCoord.y = ey;
		}
		return vec4(res.x,res.y,res.z,res.w);
	}
	
	
	// Let's simulate textureLod
	__DEVICE__ vec4 textureLod(int chan , vec2 position, float bias=0) {
		// I probably need to simulate blur to simulate this. Maybe later
		vec4 ret;
		ret = texture(chan,position,bias);
		return ret;
	}	
	
	__DEVICE__ float fract(float x) {
		return x - _floor(x);
	}
	
	__DEVICE__ vec2 fract(vec2 x) {
		vec2 r;
		r.x = x.x - _floor(x.x);
		r.y = x.y - _floor(x.y);
		return r;
	}
	
	__DEVICE__ vec3 fract(vec3 x) {
		vec3 r;
		r.x = x.x - _floor(x.x);
		r.y = x.y - _floor(x.y);
		r.z = x.z - _floor(x.z);
		return r;
	}

	__DEVICE__ vec4 fract(vec4 x) {
		vec4 r;
		r.x = x.x - _floor(x.x);
		r.y = x.y - _floor(x.y);
		r.z = x.z - _floor(x.z);
		r.w = x.w - _floor(x.w);
		return r;
	}
	
	__DEVICE__ vec2 floor(vec2 i) {
		vec2 r;
		r.x = _floor(i.x);
		r.y = _floor(i.y);
		return r;
	}	

	__DEVICE__ float floor(float i) {		
		return _floor(i);
	}		
	
	__DEVICE__ float distance(float2 a, float2 b) {
		return _hypotf(a.x - b.x, a.y - b.y);
	}
	
	__DEVICE__ float mod(float x, float y) {
		return _fmod(x,y);
	}
	
	__DEVICE__ float atan(float a, float b) {
		return _atan2f(a,b);
	}
	
	__DEVICE__ vec4 mix(vec4 a, vec4 b, float c) {
		vec4 r;
		r.x = ((1 - c) * a.x) + (c * b.x);
		r.y = ((1 - c) * a.y) + (c * b.y);
		r.z = ((1 - c) * a.z) + (c * b.z);
		r.w = ((1 - c) * a.w) + (c * b.w);
		return r;
	}
	__DEVICE__ vec3 mix(vec3 a, vec3 b, float c) {
		vec4 r;
		r.x = ((1 - c) * a.x) + (c * b.x);
		r.y = ((1 - c) * a.y) + (c * b.y);
		r.z = ((1 - c) * a.z) + (c * b.z);
		return r;
	}	
	__DEVICE__ float mix(float a, float b, float c) {
		return ((1 - c) * a) + (b * c);
	}
	
	__DEVICE__ vec2 cos_wrapper(vec2 i) {
		vec2 r;
		r.x = cos(i.x);
		r.y = cos(i.y);
		return r;
	}
	
	__DEVICE__ float cos_wrapper(float i) {
		return cos(i);
	}	
	
	__DEVICE__ vec2 sin_wrapper(vec2 i) {
		vec2 r;
		r.x = sin(i.x);
		r.y = sin(i.y);
		return r;
	}
	
	__DEVICE__ float sin_wrapper(float i) {
		return sin(i);
	}	

	__DEVICE__ float clamp(double a, double b, double c) {
		return _clampf((float)a,(float)b,(float)c);
	}
	
	__DEVICE__ float dot(vec3 a, vec3 b) {
		return (a.x * b.x) + (a.y * b.y) + (a.z * b.z);
	}
	//__DEVICE__ float dot(vec2 a, vec2 b) {
//		return (a.x * b.x) + (a.y * b.y);
//	}	
	__DEVICE__ float dot(float a, float b) {
		return a * b;
	}
	__DEVICE__ float length(vec3 v) {
		return _sqrtf((v.x*v.x) + (v.y*v.y) + (v.z*v.z));
	}
	__DEVICE__ float length(vec2 v) {
		return _sqrtf((v.x*v.x) + (v.y*v.y));
	}
	__DEVICE__ vec3 normalize(vec3 v) {
		float l = length(v);
		return vec3(v.x/l,v.y/l,v.z/l);
	}
	__DEVICE__ vec3 max(vec3 v, vec3 i) {
		return vec3(_fmaxf(v.x,i.x),_fmaxf(v.y,i.y),_fmaxf(v.z,i.z));
	}	
	__DEVICE__ vec3 max(vec3 v, double i) {
		return vec3(_fmaxf(v.x,i),_fmaxf(v.y,i),_fmaxf(v.z,i));
	}
	__DEVICE__ float max(double a, double b) {
		return _fmaxf(a,b);
	}
	__DEVICE__ vec3 clamp(vec3 v, double min, double max) {
		return vec3(_clampf(v.x,min,max),_clampf(v.y,min,max),_clampf(v.z,min,max));
	}	
	__DEVICE__ float lpowf(float a, float b) {
		float la = _logf(a);
		float bl = b * la;		
		return _expf(bl);
	}
	__DEVICE__ vec3 pow(vec3 a, vec3 b) {
		vec3 r;
		r.x = lpowf(a.x,b.x);
		r.y = lpowf(a.y,b.y);
		r.z = lpowf(a.z,b.z);
		return r;
	}
	__DEVICE__ float pow(float a, float b) {
		return lpowf(a,b);
	}
	__DEVICE__ float pow(float a, int b) {
		float c = a;
		for (int i = 1; i < b; i++) {
			c = c * a;
		}
		return c;
	}
	__DEVICE__ float abs(float a) {
		return _fabs(a);
	}
	__DEVICE__ float abs(double a) {
		return _fabs(a);
	}	
	__DEVICE__ vec2 ceil_wrapper(vec2 a) {
		vec2 r;
		r.x = _ceil(a.x);
		r.y = _ceil(a.y);
		return r;
	}
	__DEVICE__ float ceil_wrapper(float a) {
		return _ceil(a);
	}
]]

ShaderToyKernelB = [[	

    __KERNEL__ void ShaderToyKernel(__CONSTANTREF__ ShaderToyParams *params, __TEXTURE2D__ iChannel0, __TEXTURE2D__ iChannel1, __TEXTURE2D__ iChannel2, __TEXTURE2D__ iChannel3, __TEXTURE2D_WRITE__ dst)
    {
		paramsin.width = params->width;
		paramsin.height = params->height;
		paramsin.itime = params->itime;	
		paramsin.ic0width = params->ic0width;
		paramsin.ic0height = params->ic0height;
		paramsin.ic1width = params->ic1width;
		paramsin.ic1height = params->ic1height;
		paramsin.ic2width = params->ic2width;
		paramsin.ic2height = params->ic2height;
		paramsin.ic3width = params->ic3width;
		paramsin.ic3height = params->ic3height;
		paramsin.p_Float1 = params->p_Float1;
		paramsin.p_Float2 = params->p_Float2;
		paramsin.p_Float3 = params->p_Float3;
        DEFINE_KERNEL_ITERATORS_XY(x, y);	
			// Generate fragCoord
			float ox = x;
			float oy = y;
			if (x > params->width - 2) { ox = params->width - 1; } // Fix iterator bug for last column		
			fragCoord = vec2(ox,oy);
			fragCoord.x = ox;
			fragCoord.y = oy;
			iResolution = vec2(params->width, params->height);
			iResolution.x = params->width;
			iResolution.y = params->height;
			iMouse.x = params->mousex;
			iMouse.y = params->mousey;
			iMouse.z = params->mousez;
			iMouse.w = params->mousew;
			iTime = params->itime;
			iGlobalTime = params->itime;
						
			mainImage(iChannel0, iChannel1, iChannel2, iChannel3);

			_tex2DVec4Write(dst, ox, oy, fragColor);
    }
		
]]

function Process(req)
	local imgattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
		IMG_DeferAlloc = true,
    }
	local img = Image(imgattrs)	
	local blankattrs = {
        IMG_Document = self.Comp,
        { IMG_Channel = "Red", },
        { IMG_Channel = "Green", },
        { IMG_Channel = "Blue", },
        { IMG_Channel = "Alpha", },
        IMG_Width = Width,
        IMG_Height = Height,
		IMG_DeferAlloc = false,
    }
	if (ShaderProg == "" or ShaderProg == nil) then
		if (UseDevShader:GetValue(req).Value == 0) then	
			local file = InFile:GetValue(req).Value
			if (file ~= nil) then
				-- Load the file into shaderprog
				f = io.open(file,"r")
				if (f ~= nil) then
					ShaderProg = "\n" .. f:read("*all")
					f:close()
				else
					return
				end
			else
				return
			end
		end
	end
	if (UseDevShader:GetValue(req).Value == 1 and (DevCacheDirty:GetValue(req).Value == 1)) then
		ShaderProg = "\n" .. InDevShader:GetValue(req).Value	
		DevCacheDirty:SetSource(Number(0),0)			
	end
	local uid = InUniqueID:GetValue(req).Value;
	if (uid == nil or uid == "") then uid = 1 end
	local blank = Image(blankattrs)	
	local node = DVIPComputeNode(req, "ShaderToyKernel" .. uid, ShaderToyKernelA .. rewriteShader(ShaderProg, Rewrites:GetValue(req).Value) .. string.gsub(string.gsub(ShaderToyKernelB,"ShaderToyKernel","ShaderToyKernel"..uid),"ShaderToyParams","ShaderToyParams"..uid), "ShaderToyParams" .. uid, ShaderToyParams)			
	if (DevCacheDirty:GetValue(req).Value == 1) then
		node:ForceRebuild()
	end
	local params = {}
	params = node:GetParamBlock(ShaderToyParams)
	params.width = img.Width
	params.height = img.Height
	local inframerate = InFrameRate:GetValue(req).Value
	params.itime = req.Time / inframerate
	
	local ic0 = Image({IMG_Like = blank})
	if (InChannel0:GetValue(req) ~= nil) then
		ic0 = InChannel0:GetValue(req)
	else
		ic0:Fill(Pixel({R = 0, G = 0, B = 0, A = 0}))
	end	
	local ic1 = Image({IMG_Like = blank})
	if (InChannel1:GetValue(req) ~= nil) then
		ic1 = InChannel1:GetValue(req)
	else
		ic1:Fill(Pixel({R = 0, G = 0, B = 0, A = 0}))
	end	
	local ic2 = Image({IMG_Like = blank})
	if (InChannel2:GetValue(req) ~= nil) then
		ic2 = InChannel2:GetValue(req)
	else
		ic2:Fill(Pixel({R = 0, G = 0, B = 0, A = 0}))
	end	
	local ic3 = Image({IMG_Like = blank})
	if (InChannel3:GetValue(req) ~= nil) then
		ic3 = InChannel3:GetValue(req)
	else
		ic3:Fill(Pixel({R = 0, G = 0, B = 0, A = 0}))
	end	
	params.ic0width = ic0.Width
	params.ic0height = ic0.Height
	params.ic1width = ic0.Width
	params.ic1height = ic0.Height
	params.ic2width = ic0.Width
	params.ic2height = ic0.Height
	params.ic3width = ic0.Width
	params.ic3height = ic0.Height
	params.p_Float1 = 0
	params.p_Float2 = 0
	params.p_Float3 = 0
	if (InFloat1:GetValue(req).Value ~= nil) then params.p_Float1 = InFloat1:GetValue(req).Value end
	if (InFloat2:GetValue(req).Value ~= nil) then params.p_Float2 = InFloat2:GetValue(req).Value end
	if (InFloat2:GetValue(req).Value ~= nil) then params.p_Float3 = InFloat3:GetValue(req).Value end
	local mouseloc  = MousePoint:GetValue(req)
	params.mousex = mouseloc.X * img.Width
	params.mousey = mouseloc.Y * img.Height
	local mousebutton = MouseButton:GetValue(req).Value
	local thistool = ffi.string(self.RegNode.m_ID);
	local lastmousestate = self:GetData(thistool.."MouseState")
	local lastclickX = self:GetData(thistool.."LastClickX")
	local lastclickY = self:GetData(thistool.."LastClickY")
	if (req.Time == 0) then
		lastmousestate = 0;
		lastclickX = 0;
		lastclickY = 0;
	end
	if (lastmousestate == nil or lastmousestate == "") then
		lastmousestate = 0;
	end
	if (lastclickX == nil or lastclickX == "") then
		lastclickX = 0;
	end
	if (lastclickY == nil or lastclickX == "") then
		lastclickY = 0;
	end
	if (mousebutton == 1 and lastmousestate == 0) then
		lastclickX = mouseloc.X
		lastclickY = mouseloc.Y
		params.mousez = lastclickY * img.Height * -1
		params.mousew = lastclickX * img.Width * -1		
		self:SetData(thistool.."LastClickX", mouseloc.X)
		self:SetData(thistool.."LastClickY", mouseloc.Y)
	end
	if (mousebutton == 1 and lastmousestate == 1) then
		params.mousez = lastclickX * img.Width * -1
		params.mousew = lastclickY * img.Height * -1
	end
	if (mousebutton == 0 and lastmousestate == 1) then
		params.mousez = lastclickX * img.Width
		params.mousew = lastclickY * img.Height
	end
	if (mousebutton == 0 and lastmousestate == 0) then
		params.mousez = lastclickX * img.Width
		params.mousew = lastclickY * img.Height
	end
	self:SetData(thistool.."MouseState", 1);		
	params.mousebutton = mousebutton
	
	node:AddInput("iChannel0",ic0)
	node:AddInput("iChannel1",ic1)
	node:AddInput("iChannel2",ic2)
	node:AddInput("iChannel3",ic3)
	node:AddOutput("dst", img)	
	node:SetParamBlock(params)
	local ok = node:RunSession(req)
	
	if (not ok) then
		img = nil
		if (Debugs:GetValue(req).Value==1) then dump(node:GetErrorLog()) end
	end
	--node:SetParamStructCopy(nil, 0)	
	-- Output our result
	OutImage:Set(req,img)
end	

function rewriteShader(shader, log)
	-- Takes the shader code and rewrite it a little bit to make it work
	-- TODO here. Put an indicator like //*** at the beginning of the rewritten program and check for it so we don't keep processing it
	local newshader = ffi.string(shader)
	newshader = string.gsub(newshader,"void mainImage%( ?out vec4 fragColor, in vec2 fragCoord ?%)([^%{]+%{)","__DEVICE__ void mainImage(__TEXTURE2D__ iC0, __TEXTURE2D__ iC1, __TEXTURE2D__ iC2, __TEXTURE2D__ iC3)%1iChannel0=iC0;iChannel1=iC1;iChannel2=iC2;iChannel3=iC3;")
	
	-- Identify functions and make them device functions
	newshader = string.gsub(newshader,"\n(float [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(float2 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(float3 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(float4 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(vec2 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(vec3 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(vec4 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")	
	newshader = string.gsub(newshader,"\n(mat2 [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	newshader = string.gsub(newshader,"\n(void [a-zA-Z0-9]+% -%()","\n__DEVICE__ %1")
	
	-- Deal with global constants
	newshader = string.gsub(newshader,"\nconst ","\n__CONSTANT__ ")
		
	-- Pass channel with texture
	newshader = string.gsub(newshader,"texture%([% ]*iChannel([0123])","texture%(%1")
	newshader = string.gsub(newshader,"textureLod%([% ]*iChannel([0123])","textureLod%(%1")
	
	-- .r .g .b .a  to  .x .y .z .w
	--newshader = string.gsub(newshader,"%.r([% ;%+%/%-%^%=%%])",".x%1")
	--newshader = string.gsub(newshader,"%.g([% ;%+%/%-%^%=%%])",".y%1")
	--newshader = string.gsub(newshader,"%.b([% ;%+%/%-%^%=%%])",".z%1")
	--newshader = string.gsub(newshader,"%.a([% ;%+%/%-%^%=%%%)])",".w%1")
	
	-- wrappers - e.g for cos
	newshader = string.gsub(newshader,"cos%(","cos_wrapper(")
	newshader = string.gsub(newshader,"sin%(","sin_wrapper(")
	newshader = string.gsub(newshader,"ceil%(","ceil_wrapper(")
	
	-- drop the in
	newshader = string.gsub(newshader,"in float","float")
	newshader = string.gsub(newshader,"%([ ]*in ","(")
	
	-- Variable sliders	
	newshader = string.gsub(newshader,"p_Float1","paramsin.p_Float1")
	newshader = string.gsub(newshader,"p_Float2","paramsin.p_Float2")
	newshader = string.gsub(newshader,"p_Float3","paramsin.p_Float3")
	
	if (log==1) then dump(newshader) end
	return newshader
end

function NotifyChanged(inp, param, time)
	if (param ~= nil) then
		if (param.Value == 1) then
			if (inp == SiteButton) then
				os.execute('open "" "https://www.chrisridings.com"')
				os.execute('start "" "https://www.chrisridings.com"')
			end
			if (inp == YouTubeButton) then
				os.execute('open "" "https://www.youtube.com/c/ChrisRidings"')
				os.execute('start "" "https://www.youtube.com/c/ChrisRidings"')
			end				
		end
	end
	if (inp == InDevShader) then
		DevCacheDirty:SetSource(Number(1),0)
	end
end
