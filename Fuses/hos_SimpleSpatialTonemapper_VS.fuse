--[[	 
       Simple Spatial ToneMapper fuse by Sven Neve / House of Secrets

       HSV_to_RGB and RGB_to_HSV algorithms taken from 
			 Advanced Image Processing with DirectX® 9 Pixel Shaders by Jason L. Mitchell et al. ATI Research.
			 
			 Tonemapping algorithm taken from the paper : A Simple Spatial Tone Mapping Operator for High Dynamic Range Images
			 by K.K. Biswas and Sumanta Pattanaik; School of Computer Science, University of Central Florida; Orlando, Florida

		]]--

-- Here's the Cg shader itself:
shader = 
[[
struct SSTMFuse : ViewShader
{
	ViewShader source;
	float outSat, avgLum, conMult, gamma;
	
	float3 RGB_to_HSV (float3 color) 
	{ 
			float  r, g, b, delta; 
			float  colorMax, colorMin; 
			float  h=0, s=0, v=0; 
			float3 hsv=0; 
			 
			r = color[0]; 
			g = color[1]; 
			b = color[2]; 
	 
			colorMax = max (r,g); 
			colorMax = max (colorMax,b); 
	 
			colorMin = min (r,g); 
			colorMin = min (colorMin,b); 
	 
			v = colorMax;               // this is value 
	 
			if (colorMax != 0) 
			{ 
					s = (colorMax - colorMin) / colorMax; 
			} 
	 
			if (s != 0) // if not achromatic 
			{ 
					delta = colorMax - colorMin; 
					if (r == colorMax) 
					{ 
							h = (g-b)/delta; 
					} 
					else if (g == colorMax) 
					{ 
							h = 2.0 + (b-r) / delta; 
					}
		 else // b is max 
					{ 
							h = 4.0 + (r-g)/delta; 
					} 
	 
					h *= 60; 
	 
					if( h < 0) 
					{ 
							h +=360; 
					} 
			 
					hsv[0] = h / 360.0;    // moving h to be between 0 and 1. 
					hsv[1] = s; 
					hsv[2] = v; 
			} 
	 
			return hsv; 
	} 
	float3 HSV_to_RGB (float3 hsv) 
	{ 
			float3 color=0; 
			float  f,p,q,t; 
			float  h,s,v; 
			float  r=0,g=0,b=0; 
			float  i; 
	 
			if (hsv[1] == 0) 
			{ 
					if (hsv[2] != 0) 
					{ 
							color = hsv[2]; 
					} 
			} 
			else 
			{ 
					h = hsv.x * 360.0; 
					s = hsv.y; 
					v = hsv.z; 
	 
					if (h == 360.0) 
					{ 
							h=0; 
					} 
	 
					h /=60; 
					i = floor (h); 
					f = h-i; 
					p = v * (1.0 - s);
									q = v * (1.0 - (s * f)); 
					t = v * (1.0 - (s * (1.0 -f))); 
	 
					if (i == 0) 
					{ 
							r = v; 
							g = t; 
							b = p; 
					} 
					else if (i == 1) 
					{ 
							r = q;  
							g = v;  
							b = p; 
					} 
					else if (i == 2) 
					{ 
							r = p; 
							g = v; 
							b = t; 
					} 
					else if (i == 3) 
					{ 
							r = p; 
							g = q; 
							b = v; 
					} 
					else if (i == 4) 
					{ 
							r = t; 
							g = p; 
							b = v; 
					} 
					else if (i == 5) 
					{ 
							r = v; 
							g = p; 
							b = q; 
					} 
	 
					color.r = r; 
					color.g = g; 
					color.b = b; 
			} 
	 
			return color; 
	}

	void ShadePixel(inout FuPixel f)
	{
		source.ShadePixel(f);	
		float pixLum, globalContrast, dispLum, contrastLum, filteredLum;
		float3 tempPixel;
		
		pixLum = 0.299 * f.Color.r + 0.587 * f.Color.g + 0.114 * f.Color.b;
		globalContrast = conMult * avgLum;
		
		filteredLum = pixLum;
		// The above should be a 10x10 median filter, i can implement this, as i finally
		// figured out how to do this, but on the otherhand, is it really necessary for a view shader?
		
		contrastLum = globalContrast;//filteredLum * (log(0.0000001 + filteredLum / pixLum)) + globalContrast;
		// And since we are not doing any filtering, contrastLum will be almost identical to
		// globalContrast, and thus we can skip the whole log math part for now.
		
		dispLum = pixLum / (pixLum + contrastLum);
		tempPixel = RGB_to_HSV(f.Color.rgb / pixLum);
		tempPixel[1] *= outSat;
		tempPixel[2] *= dispLum;
		tempPixel = HSV_to_RGB(tempPixel);
		f.Color.rgb = sign(tempPixel) * pow(abs(tempPixel), gamma);
	}
};
]]

-- regnode
FuRegisterClass("SSTMFuse", CT_ViewLUTPlugin, {		-- ID must be unique
	REGS_Name = "Simple Spatial ToneMapper Fuse",
	})
	
-- Called on creation. Add any controls here.
function Create()
	InavgLum = self:AddInput("Average Scene Luminance", "avgLum", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MinScale = 0.0001,
		INP_MaxScale = 2.0,
		INP_Default  = 1.0,
		ICD_Center = 0.0,
		})
	InConMult = self:AddInput("Contrast Multiplier", "conMult", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MinScale = 0.0001,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		ICD_Center = 0.0,
		})
	InSaturate = self:AddInput("Saturation", "outSat", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		ICD_Center = 0.0,
		})
	InGamma = self:AddInput("Gamma", "Gamma", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 5.0,
		INP_Default  = 1.0,
		ICD_Center = 1.0,
		})
end


function SetupShader(req, img)
	local vs = ViewShader("SSTMFuse", shader);

	-- get global parameter indices
	avgLumparam   = vs:AddParam("avgLum");
	conMultparam   = vs:AddParam("conMult");
	outSatparam   = vs:AddParam("outSat");
	gammaparam  = vs:AddParam("gamma");	
	return vs;
end

function SetupParams(req, vs, img)
	local avgLum = InavgLum:GetValue(req).Value;
	local conMult = InConMult:GetValue(req).Value;
	local outSat = InSaturate:GetValue(req).Value;
	local gamma = InGamma:GetValue(req).Value;
	
	--I hate reinventing the wheel, so credits go to Eyeon for this little snippet of code
	if gamma ~= 0.0 then
		gamma = 1.0 / gamma;
	else
		gamma = 1000000.0;
	end
	
	vs:SetParam(avgLumparam, avgLum);
	vs:SetParam(conMultparam, conMult);
	vs:SetParam(outSatparam, outSat);
	vs:SetParam(gammaparam, gamma);
	
	return true;
end


