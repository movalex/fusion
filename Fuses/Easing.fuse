--[[--

I wish other youtubers would stop taking my ideas and claiming them as their own without credit.
So I'll take theirs and make it easier. Here's a fuse that implements every easing method from
https://easings.net/

Chris Ridings
www.chrisridings.com

--]]--

FuRegisterClass("EasingCurves", CT_Modifier, {
	REGS_Category = "Fuses",
	REGS_OpIconString = "fEC",
	REGS_OpDescription = "Easing Curves",
	REGID_DataType = "Number",
	REGID_InputDataType = "Number",
	REG_OpNoMask = true,
	REG_NoBlendCtrls = true,
	REG_NoObjMatCtrls = true,
	REG_NoMotionBlurCtrls = true,
	REG_TimeVariant = true,
	})
	
FuRegisterClass("EasingCurvesPoint", CT_Modifier, {
	REGS_Category = "Fuses",
	REGS_OpIconString = "fECP",
	REGS_OpDescription = "Easing Curves Point",
	REGID_DataType = "Point",
	REGID_InputDataType = "Point",
	REG_OpNoMask = true,
	REG_NoBlendCtrls = true,
	REG_NoObjMatCtrls = true,
	REG_NoMotionBlurCtrls = true,
	REG_TimeVariant = true,
	})	



function Create()	

	ModType = ffi.string(self.RegNode.m_ID):sub(6)

	SiteButton = self:AddInput("Visit www.chrisridings.com", "Label1", {
		LINKID_DataType = "Text",
		INPID_InputControl = "ButtonControl",
		INP_DoNotifyChanged = true,
		INP_External = false,
	})	
	YouTubeButton = self:AddInput("Visit the Youtube Channel", "Label2", {
		LINKID_DataType = "Text",
		INPID_InputControl = "ButtonControl",
		INP_DoNotifyChanged = true,
		INP_External = false,
	})	
			
	
	if (ModType == "EasingCurves") then
		OutValue = self:AddOutput("CurveValue", "CurveValue", {
			LINKID_DataType = "Number",
			LINK_Main = 1,
		})			
		InOperation = self:AddInput("Curve Type", "CurveType", {
			LINKID_DataType = "Number",
			INPID_InputControl = "ComboControl",
			INP_Default = 0.0,
			INP_Integer = true,
			ICD_Width = 1,
			{ CCS_AddString = "None", },
			{ CCS_AddString = "easeInSine", },
			{ CCS_AddString = "easeOutSine", },
			{ CCS_AddString = "easeInOutSine", },
			{ CCS_AddString = "easeInQuad", },
			{ CCS_AddString = "easeOutQuad", },
			{ CCS_AddString = "easeInOutQuad", },
			{ CCS_AddString = "easeInCubic", },
			{ CCS_AddString = "easeOutCubic", },
			{ CCS_AddString = "easeInOutCubic", },
			{ CCS_AddString = "easeInQuart", },
			{ CCS_AddString = "easeOutQuart", },
			{ CCS_AddString = "easeInOutQuart", },
			{ CCS_AddString = "easeInQuint", },
			{ CCS_AddString = "easeOutQuint", },
			{ CCS_AddString = "easeInOutQuint", },
			{ CCS_AddString = "easeInExpo", },
			{ CCS_AddString = "easeOutExpo", },
			{ CCS_AddString = "easeInOutExpo", },
			{ CCS_AddString = "easeInCirc", },
			{ CCS_AddString = "easeOutCirc", },
			{ CCS_AddString = "easeInOutCirc", },
			{ CCS_AddString = "easeInBack", },
			{ CCS_AddString = "easeInOutBack", },
			{ CCS_AddString = "easeInOutBack", },
			{ CCS_AddString = "easeInElastic", },
			{ CCS_AddString = "easeOutElastic", },
			{ CCS_AddString = "easeInOutElastic", },
			{ CCS_AddString = "easeInBounce", },
			{ CCS_AddString = "easeOutBounce", },
			{ CCS_AddString = "easeInOutBounce", },
			CC_LabelPosition = "Vertical",
			})

		InValue = self:AddInput("InValue", "InValue", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_Default = 0,
			INP_Integer = false,
			INP_DoNotifyChanged = true,
			INP_MinScale = 0,
			INP_MaxScale = 1,
			})		
	end
	
	if (ModType == "EasingCurvesPoint") then
		OutPoint = self:AddOutput("PointValue", "PointValue", {
			LINKID_DataType = "Point",
			LINK_Main = 1,
		})		
		InXOperation = self:AddInput("X Curve Type", "X CurveType", {
			LINKID_DataType = "Number",
			INPID_InputControl = "ComboControl",
			INP_Default = 0.0,
			INP_Integer = true,
			ICD_Width = 1,
			{ CCS_AddString = "None", },
			{ CCS_AddString = "easeInSine", },
			{ CCS_AddString = "easeOutSine", },
			{ CCS_AddString = "easeInOutSine", },
			{ CCS_AddString = "easeInQuad", },
			{ CCS_AddString = "easeOutQuad", },
			{ CCS_AddString = "easeInOutQuad", },
			{ CCS_AddString = "easeInCubic", },
			{ CCS_AddString = "easeOutCubic", },
			{ CCS_AddString = "easeInOutCubic", },
			{ CCS_AddString = "easeInQuart", },
			{ CCS_AddString = "easeOutQuart", },
			{ CCS_AddString = "easeInOutQuart", },
			{ CCS_AddString = "easeInQuint", },
			{ CCS_AddString = "easeOutQuint", },
			{ CCS_AddString = "easeInOutQuint", },
			{ CCS_AddString = "easeInExpo", },
			{ CCS_AddString = "easeOutExpo", },
			{ CCS_AddString = "easeInOutExpo", },
			{ CCS_AddString = "easeInCirc", },
			{ CCS_AddString = "easeOutCirc", },
			{ CCS_AddString = "easeInOutCirc", },
			{ CCS_AddString = "easeInBack", },
			{ CCS_AddString = "easeInOutBack", },
			{ CCS_AddString = "easeInOutBack", },
			{ CCS_AddString = "easeInElastic", },
			{ CCS_AddString = "easeOutElastic", },
			{ CCS_AddString = "easeInOutElastic", },
			{ CCS_AddString = "easeInBounce", },
			{ CCS_AddString = "easeOutBounce", },
			{ CCS_AddString = "easeInOutBounce", },
			CC_LabelPosition = "Vertical",
			})		
		InX = self:AddInput("X", "X", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_Default = 0.5,
			INP_Integer = false,
			INP_DoNotifyChanged = true,
			INP_MinScale = 0,
			INP_MaxScale = 1,
			})	
		XOffset = self:AddInput("X Offset", "XOffset", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_Default = 0,
			INP_Integer = false,
			INP_DoNotifyChanged = true,
			INP_MinScale = -1,
			INP_MaxScale = 1,
			})				
		InYOperation = self:AddInput("Y Curve Type", "Y CurveType", {
			LINKID_DataType = "Number",
			INPID_InputControl = "ComboControl",
			INP_Default = 0.0,
			INP_Integer = true,
			ICD_Width = 1,
			{ CCS_AddString = "None", },
			{ CCS_AddString = "easeInSine", },
			{ CCS_AddString = "easeOutSine", },
			{ CCS_AddString = "easeInOutSine", },
			{ CCS_AddString = "easeInQuad", },
			{ CCS_AddString = "easeOutQuad", },
			{ CCS_AddString = "easeInOutQuad", },
			{ CCS_AddString = "easeInCubic", },
			{ CCS_AddString = "easeOutCubic", },
			{ CCS_AddString = "easeInOutCubic", },
			{ CCS_AddString = "easeInQuart", },
			{ CCS_AddString = "easeOutQuart", },
			{ CCS_AddString = "easeInOutQuart", },
			{ CCS_AddString = "easeInQuint", },
			{ CCS_AddString = "easeOutQuint", },
			{ CCS_AddString = "easeInOutQuint", },
			{ CCS_AddString = "easeInExpo", },
			{ CCS_AddString = "easeOutExpo", },
			{ CCS_AddString = "easeInOutExpo", },
			{ CCS_AddString = "easeInCirc", },
			{ CCS_AddString = "easeOutCirc", },
			{ CCS_AddString = "easeInOutCirc", },
			{ CCS_AddString = "easeInBack", },
			{ CCS_AddString = "easeInOutBack", },
			{ CCS_AddString = "easeInOutBack", },
			{ CCS_AddString = "easeInElastic", },
			{ CCS_AddString = "easeOutElastic", },
			{ CCS_AddString = "easeInOutElastic", },
			{ CCS_AddString = "easeInBounce", },
			{ CCS_AddString = "easeOutBounce", },
			{ CCS_AddString = "easeInOutBounce", },
			CC_LabelPosition = "Vertical",
			})			
		InY = self:AddInput("Y", "Y", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_Default = 0.5,
			INP_Integer = false,
			INP_DoNotifyChanged = true,
			INP_MinScale = 0,
			INP_MaxScale = 1,
			})
		YOffset = self:AddInput("Y Offset", "YOffset", {
			LINKID_DataType = "Number",
			INPID_InputControl = "SliderControl",
			INP_Default = 0,
			INP_Integer = false,
			INP_DoNotifyChanged = true,
			INP_MinScale = -1,
			INP_MaxScale = 1,
			})	
	end

	InMultiplier = self:AddInput("Multiplier", "Multiplier", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_Default = 1,
		INP_Integer = false,
		INP_DoNotifyChanged = true,
		INP_MinScale = 0,
		INP_MaxScale = 1000,
		})	
		
end


function NotifyChanged(inp, param, time)
	if (param ~= nil) then
		if (param.Value == 1) then
			if (inp == SiteButton) then
				os.execute('open "" "https://www.chrisridings.com"')
				os.execute('start "" "https://www.chrisridings.com"')
			end
			if (inp == YouTubeButton) then
				os.execute('open "" "https://www.youtube.com/c/ChrisRidings"')
				os.execute('start "" "https://www.youtube.com/c/ChrisRidings"')
			end			
		end
	end
end

function easeOutBounce(x)
		local n1 = 7.5625
		local d1 = 2.75
		if (x < 1 / d1) then
			return n1 * x * x
		elseif (x < 2 / d1) then
			return n1 * (x - 1.5 / d1) * (x - 1.5) + 0.75
		elseif (x < 2.5 / d1) then
			return n1 * (x - 2.25 / d1) * (x - 2.25) + 0.9375
		else
			return n1 * (x - 2.625 / d1) * (x - 2.625) + 0.984375
		end
end

function calcCurve(x, mode, mul)
	if (mode == 0) then
		y = x * mul
	end
	if (mode == 1) then
		y = (1 - math.cos((x * math.pi) / 2)) * mul
	end
	if (mode == 2) then
		y = (math.sin((x * math.pi) / 2)) * mul
	end
	if (mode == 3) then
		y = (-(math.cos(math.pi * x) - 1) / 2) * mul
	end
	if (mode == 4) then
		y = (x * x) * mul
	end
	if (mode == 5) then
		y = (1 - (1 - x) * (1 - x)) * mul
	end
	if (mode == 6) then
		if (x < 0.5) then
			y = (2 * x * x) * mul
		else
			y = (1 - math.pow(-2 * x + 2, 2) / 2) * mul
		end
	end
	
	if (mode == 7) then
		y = (x * x * x) * mul
	end
	if (mode == 8) then
		y = (1 - math.pow(1 - x, 3)) * mul
	end
	if (mode == 9) then
		if (x < 0.5) then
			y = (4 * x * x * x) * mul
		else
			y = (1 - math.pow(-2 * x + 2, 3) / 2) * mul
		end
	end
	if (mode == 10) then
		y = (x * x * x * x) * mul
	end
	if (mode == 11) then
		y = (1 - math.pow(1 - x, 4)) * mul
	end
	if (mode == 12) then
		if (x < 0.5) then
			y = (8 * x * x * x * x) * mul
		else
			y = (1 - math.pow(-2 * x + 2, 4) / 2) * mul
		end
	end
	
	if (mode == 13) then
		y = (x * x * x * x * x) * mul
	end
	if (mode == 14) then
		y = (1 - math.pow(1 - x, 5)) * mul
	end
	if (mode == 15) then
		if (x < 0.5) then
			y = (16 * x * x * x * x * x) * mul
		else
			y = (1 - math.pow(-2 * x + 2, 5) / 2) * mul
		end
	end
	if (mode == 16) then
		if (x == 0) then
			y = 0
		else
			y = (math.pow(2, 10 * x - 10)) * mul
		end
	end
	if (mode == 17) then
		if (x == 1) then
			y = 1 * mul
		else
			y = (1 - math.pow(2, -10 * x)) * mul
		end		
	end
	if (mode == 18) then
		if (x < 0.5) then
			y = (math.pow(2, 20 * x - 10) / 2) * mul
		else
			y = ((2 - math.pow(2, -20 * x + 10)) / 2) * mul
		end
		if (x == 0) then
			y = 0
		end
		if (x == 1) then
			y =  1 * mul
		end
	end
	
	if (mode == 19) then
		y = (1 - math.sqrt(1 - math.pow(x, 2))) * mul
	end
	if (mode == 20) then
		y = (math.sqrt(1 - math.pow(x - 1, 2))) * mul
	end
	if (mode == 21) then
		if (x < 0.5) then
			y = ((1 - math.sqrt(1 - math.pow(2 * x, 2))) / 2) * mul
		else
			y = ((math.sqrt(1 - math.pow(-2 * x + 2, 2)) + 1) / 2) * mul
		end
	end
	if (mode == 22) then
		y = (2.70158 * x * x * x - 1.70158 * x * x) * mul
	end
	if (mode == 23) then
		y = (1 + 2.70158 * math.pow(x - 1, 3) + 1.70158 * math.pow(x - 1, 2)) * mul
	end
	if (mode == 24) then
		if (x < 0.5) then
			y = ((math.pow(2 * x, 2) * ((2.5949095 + 1) * 2 * x - 2.5949095)) / 2) * mul
		else
			y = ((math.pow(2 * x - 2, 2) * ((2.5949095 + 1) * (x * 2 - 2) + 2.5949095) + 2) / 2) * mul
		end
	end
	
	if (mode == 25) then
		if (x == 0) then
			y = 0
		elseif (x == 1) then
			y = 1 * mul
		else
			y = (-math.pow(2, 10 * x - 10) * math.sin((x * 10 - 10.75) * ((2 * math.pi) / 3))) * mul
		end
	end
	if (mode == 26) then
		if (x == 0) then
			y = 0
		elseif (x == 1) then
			y = 1 * mul
		else
			y = (math.pow(2, -10 * x) * math.sin((x * 10 - 0.75) * ((2 * math.pi) / 3)) + 1) * mul
		end
	end	
	if (mode == 27) then
		if (x == 0) then
			y = 0
		elseif (x == 1) then
			y = 1 * mul
		elseif (x < 0.5) then
			y = (-(math.pow(2, 20 * x - 10) * math.sin((20 * x - 11.125) * ((2 * math.pi) / 4.5))) / 2) * mul
		else
			y = ((math.pow(2, -20 * x + 10) * math.sin((20 * x - 11.125) * ((2 * math.pi) / 4.5))) / 2 + 1) * mul
		end
	end	
	if (mode == 28) then
		y = (1-easeOutBounce(1-x)) * mul
	end
	if (mode == 29) then
		y = easeOutBounce(x) * mul
	end
	if (mode == 30) then
		if (x < 0.5) then
			y = ((1 - easeOutBounce(1 - 2 * x)) / 2) * mul
		else
			y = ((1 + easeOutBounce(2 * x - 1)) / 2) * mul
		end
	end
	return y
end

function Process(req) 
	local x = 0
	local y = 0
	local xo = 0
	local yo = 0
	local mode = 0
	local mul = InMultiplier:GetValue(req).Value
	ModType = ffi.string(self.RegNode.m_ID):sub(6)
	
	if (ModType == "EasingCurves") then
		x = InValue:GetValue(req).Value
		mode = InOperation:GetValue(req).Value
		OutValue:Set(req, calcCurve(x,mode,mul))
	end
	if (ModType == "EasingCurvesPoint") then
		x = InX:GetValue(req).Value
		y = InY:GetValue(req).Value
		xo = XOffset:GetValue(req).Value
		yo = YOffset:GetValue(req).Value
        mode = InOperation:GetValue(req).Value
        print(mode)
		x = calcCurve(x, mode, mul) + xo
		y = calcCurve(y, mode, mul) + yo
		OutPoint:Set(req, Point(x,y))
	end
	
end


