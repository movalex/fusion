FuRegisterClass("WaveModifier", CT_Modifier, {
	REGS_Name = "Wave Modifier",
	REGS_Category = "Fuses",
	REGS_OpIconString = "Wav",
	REGS_OpDescription = "Wave Modifier",
	REG_OpNoMask = true,
	REG_NoBlendCtrls = true,
	REG_NoObjMatCtrls = true,
	REG_NoMotionBlurCtrls = true,
	REG_TimeVariant = true,
	REGID_DataType = "Number",
	})

WVM_Flat = "Flat"
WVM_Line = "Line"
WVM_Saw = "Saw"
WVM_Tri = "Tri"
WVM_Square = "Square"
WVM_Sine = "Sine"
WVM_Noise = "Noise"


	
function Create()

	InWave = self:AddInput("Wave", "Wave", {
		LINKID_DataType =		"FuID",
		INPID_InputControl =	"MultiButtonIDControl",
		MBTNC_StretchToFit = true,
		{ MBTNC_AddButton =		WVM_Flat },
		{ MBTNC_AddButton =		WVM_Line },
		{ MBTNC_AddButton =		WVM_Saw },
		{ MBTNC_AddButton =		WVM_Tri },
		{ MBTNC_AddButton =		WVM_Square },
		{ MBTNC_AddButton =		WVM_Sine }, 
		{ MBTNC_AddButton =		WVM_Noise },
		})	

	InPeriod = self:AddInput("Period", "Period", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			5.0,
		INP_MinAllowed =		0.0,
		INP_MaxScale =			50.0,
		})	

	InStrength = self:AddInput("Strength", "Strength", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default =			1.0,
		INP_MaxScale = 			10.0,
		ICD_Center =             1.0,
		})	

	InOffset = self:AddInput("Offset", "Offset", {
		LINKID_DataType =		"Number",
		LINKID_Main =			1,
		INPID_InputControl =	"ScrewControl",
		})	

	InLimit = self:AddInput("Limit", "Limit", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"CheckboxControl",
		INP_Default = 			1.0,
		ICD_Width =           	0.25,
		})	

	InRepeat = self:AddInput("Repeat", "Repeat", {
		LINKID_DataType =		"Number",
		INPID_InputControl =	"SliderControl",
		INP_Default = 			1.0,
		INP_MinAllowed =        0.0,
		INP_MaxScale =          10.0,
		ICD_Width =           	0.75,
		})	

	OutResult = self:AddOutput("Result", "Result", {
		LINKID_DataType = "Number",
		LINK_Main = 1,
		})				
end

function Process(req) 

	local t = req.Time
	local wave = InWave:GetValue(req).Value
	local period = InPeriod:GetValue(req).Value
	local strength = InStrength:GetValue(req).Value
	local offset = InOffset:GetValue(req).Value
	local freq = 1.0 / period
	local limit = InLimit:GetValue(req).Value
	local times = InRepeat:GetValue(req).Value
	local r

	if limit == 1 then
		t = math.min(t, period * times)
		t = math.max(t, 0)
	end
	
	if wave == WVM_Flat then
		r = 1.0
	elseif wave == WVM_Line then
		r = t * freq
	elseif wave == WVM_Saw then
		r = t * freq % 1.0
	elseif wave == WVM_Tri then
		r = 1 - math.abs((t * freq % 1.0) - 0.5) * 2
	elseif wave == WVM_Square then
		r = (t * freq % 1.0 < 0.5) and 1 or 0
	elseif wave == WVM_Sine then
		r = math.sin(t * freq * 2 * math.pi) * 0.5 + 0.5
	elseif wave == WVM_Noise then
		r = bmd.noise(t * freq * 2) * 2 + .5
	end

	r = r * strength + offset

	OutResult:Set(req, Number(r))
end
