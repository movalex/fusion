--[[--
Multistep Blur

Based on the FuseBlur.Fuse by Isaac Guenard.
Useful when you want to create realistic glow from an object of complicated shape.
More information at: http://vfxpedia.com/index.php?title=Multistep_Blur

Idea by Gregory Chalenko, programming by Roman Fedotov.

updated on 2010-11-08 by Stefan Ihringer to fix the use of an uninitialized image
buffer that lead to random flickering. Also added progress indicator.
--]]--

FuRegisterClass("MultistepBlur", CT_Tool, {
	REGS_Name = "Multistep Blur",
	REGS_Category = "Fuses\\Bazelevs",
	REGS_OpIconString = "MBlur",
	REGS_OpDescription = "Multistep Blur",
	REG_NoMotionBlurCtrls = true,
	REG_NoBlendCtrls = true,
	})
 
function Create()
	InFilter = self:AddInput("Filter", "Filter", {
		LINKID_DataType = "Number",
		INPID_InputControl = "MultiButtonControl",
		INP_Default = 4.0,
		{MBTNC_AddButton = "Box", 		MBTNCD_ButtonWidth = 0.2, },
		{MBTNC_AddButton = "Soften", 	MBTNCD_ButtonWidth = 0.2, },
		{MBTNC_AddButton = "Bartlett", 	MBTNCD_ButtonWidth = 0.2, },
		{MBTNC_AddButton = "Multi-box", MBTNCD_ButtonWidth = 0.2, },
		{MBTNC_AddButton = "Gaussian", 	MBTNCD_ButtonWidth = 0.2, },
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})

	InR = self:AddInput("Red", "Red", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		

	InG = self:AddInput("Green", "Green", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		

	InB = self:AddInput("Blue", "Blue", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		

	InA = self:AddInput("Alpha", "Alpha", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		ICD_Width = 0.25,
		})		
		
	InLockXY = self:AddInput("Lock X/Y", "LockXY", {
		LINKID_DataType = "Number",
		INPID_InputControl = "CheckboxControl",
		INP_Integer = true,
		INP_Default = 1.0,
		INP_DoNotifyChanged = true, -- We want to hear about changes on this control
		})
		
	InBlurStartX = self:AddInput("X Minimum Blur", "XMinimumBlur", {
		LINKS_Name = "Blur Size",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 20.0,
		})		

	InBlurStartY = self:AddInput("Y Minimum Blur", "YMinimumBlur", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 20.0,
		IC_Visible = false,
		})		
	
	InBlurEndX = self:AddInput("X Maximum Blur", "XMaximumBlur", {
		LINKS_Name = "Blur Size",
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 100.0,
		})		

	InBlurEndY = self:AddInput("Y Maximum Blur", "YMaximumBlur", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 300.0,
		INP_MinScale = 0.0,
		INP_Default = 100.0,
		IC_Visible = false,
		})		
	
	InCount = self:AddInput("Steps", "Steps", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 16.0,
		INP_MinScale = 1.0,
		INP_Default = 4.0,
		INP_MaxAllowed = 64.0,
		INP_Integer = true,
		})	

	InExp = self:AddInput("Steps Bias", "StepsBias", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 3.0,
		INP_MinScale = -3.0,
		INP_Default = 0.0,
		})	

	InPasses = self:AddInput("Num Passes", "NumPasses", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 16.0,
		INP_Default = 4.0,
		INP_MaxAllowed = 64.0,
		INP_Integer = true,
		IC_Visible = false,
		})	
		
	InBlend = self:AddInput("Blend" , "Blend", {
		LINKID_DataType = "Number",
		INPID_InputControl = "SliderControl",
		INP_MaxScale = 1.0,
		INP_MaxAllowed = 1.0,
		INP_Default = 1.0,
		})			

	InImage = self:AddInput("Input", "Input", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})

	OutImage = self:AddOutput("Output", "Output", {
		LINKID_DataType = "Image",
		LINK_Main = 1,
		})				
------------------------------------------------------------------------------------------{{{
	InGradStartR = self:AddInput("Red1", "Red1", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		ICS_Name = "Color min",
		IC_ControlGroup = 1,
		IC_ControlID = 0,
		})
		
	InGradStartG = self:AddInput("Green1", "Green1", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 1,
		IC_ControlID = 1,
		})
		
	InGradStartB = self:AddInput("Blue1", "Blue1", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 1,
		IC_ControlID = 2,
		})
	------------------------------------------------------------------------------------------
	InGradEndR = self:AddInput("Red2", "Red2", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		ICS_Name = "Color max",
		IC_ControlGroup = 2,
		IC_ControlID = 0,
		})
		
	InGradEndG = self:AddInput("Green2", "Green2", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 2,
		IC_ControlID = 1,
		})
		
	InGradEndB = self:AddInput("Blue2", "Blue2", {
		LINKID_DataType = "Number",
		INPID_InputControl = "ColorControl",
		INP_MinScale = 0.0,
		INP_MaxScale = 1.0,
		INP_Default  = 1.0,
		IC_ControlGroup = 2,
		IC_ControlID = 2,
		})
------------------------------------------------------------------------------------------}}}
end
function rgbToHsv( r, g, b) 
	local cMin = math.min( r, g, b )
	local cMax = math.max( r, g, b )
	local delta = cMax - cMin
	local v = cMax
	local s = 0
	local h = 0
	if v ~= 0 then
		s = delta / cMax 
	else
		s = 0
	end
	if s == 0 then
		h = 0
	else
		if r == v then
			h = (g -b )/ delta
		else
			if g == v then
				h = 2 + (b - r) / delta
			else
				h = 4 + (r-g)/delta
			end
		end
		h = h * 60
		if h < 0 then
			h = h + 360
		end
	end
	return h, s, v
end
function hsvToRgb( h, s, v)
	if s == 0 then
		if h == 0 then 
			return v, v, v
		else 
			return 0, 0, 0
		end
	else
		if h == 360 then 
			h = 0
		end
		h = h / 60
		local i = math.floor( h )
		local f = h - i
		local p = v * ( 1 - s )
		local q = v * ( 1 - s * f )
		local t = v * ( 1 - s * (1 - f))
		if i == 0 then
			return v, t, p
		elseif i == 1 then
			return  q, v, p
		elseif i == 2 then
			return  p, v, t
		elseif i == 3 then
			return p, q, v
		elseif i == 4 then
			return t, p, v
		elseif i == 5 then
			return v, p, q
		end
	end
end
function Process(req) 


	local img = InImage:GetValue(req)
	local blurStart_x = InBlurStartX:GetValue(req).Value-- / 720
	local blurEnd_x = InBlurEndX:GetValue(req).Value --/ 720
	local locked = (InLockXY:GetValue(req).Value > 0.5)
	
	if locked == true then 
		blurStart_y = blurStart_x
		blurEnd_y = blurEnd_x
	else
		blurStart_y = InBlurStartY:GetValue(req).Value --/ 720
		blurEnd_y = InBlurEndY:GetValue(req).Value --/ 720
	end
	
	local filter = InFilter:GetValue(req).Value
	local do_r = InR:GetValue(req).Value
	local do_g = InG:GetValue(req).Value
	local do_b = InB:GetValue(req).Value
	local do_a = InA:GetValue(req).Value
	local passes = math.floor( InPasses:GetValue(req).Value + 0.5 ) -- make damn sure this is an integer
	local blend = InBlend:GetValue(req).Value
	
	local result = Image({IMG_Like = img})
	-- added 2010-11-08: uninitialized result image was causing random flickering
	result:Fill(Pixel({R = 0, G = 0, B = 0, A = 0}))
	local tmpImg = Image({IMG_Like = img})
	
	local filters = {"Box", "Soften", "Bartlett", "Multi-box", "Gaussian"}
	------------------------------------------------------------------------------------------
	local start_h = InGradStartR:GetValue(req).Value
	local start_s = InGradStartG:GetValue(req).Value
	local start_v = InGradStartB:GetValue(req).Value
	start_h, start_s, start_v = rgbToHsv( start_h, start_s, start_v )
	
	local end_h = InGradEndR:GetValue(req).Value
	local end_s = InGradEndG:GetValue(req).Value
	local end_v = InGradEndB:GetValue(req).Value
	end_h, end_s, end_v = rgbToHsv( end_h, end_s, end_v )
		--print("------------------")
		--print( start_h, start_s, start_v)
		--print( end_h, end_s, end_v )
	--print("------------------------------------------------------------------------------------------\n")
	local expVal = InExp:GetValue(req).Value
	function interpolate3( x, count,  n, v1, v2, v3, a1, a2, a3 )
	-- x - nomer tekushego shaga
	-- count - chislo shagov
	-- n - pokazatel stepeni
	-- mv1, v2, v3,     a1, a2, a3 - interpoliruemie czveta
	
		if a1 - v1 > 180 then
			v1 = v1 + 360
		elseif a1 - v1 < -180 then
			a1 = a1 +  360
		end
	

		local nn = 0
		if n >= 0 then
			nn = n + 1
		else
			nn = -1.0 / ( n - 1)
		end
		local k = (x / (count-1 + 0.0001) )^nn
		return		(v1 + (a1 - v1)*k) % 360 ,
							v2 + (a2 - v2)*k,
							v3 + (a3 - v3)*k 
	end
	function exponent( x, count,  n,  minBlur, maxBlur ) --{{{
	-- x - nomer tekushego shaga
	-- count - chislo shagov
	-- n - pokazatel stepeni
	-- minBlur maxBlur - predeli blura
	--------------------------------------------------------------------------------------------
	--f2(x,count, n, minBlur, maxBlur ) = minBlur + (maxBlur - minBlur)*(x / (count-1 + 0.0001) )**n
		local nn = 0
		if n >= 0 then
			nn = n + 1
		else
			nn = -1.0 / ( n - 1)
		end
		return  minBlur + (maxBlur - minBlur)*(x / (count-1 + 0.0001) )^nn
	end --}}}
	local count = InCount:GetValue(req).Value

	local blendCoeff = 1.0 / count
	--print( "blendCoeff ", blendCoeff )

	self:SetProgress(0)
	for i = 0, count-1 do
		--local curBlur_x = blurStart_x + (blurEnd_x - blurStart_x ) * i / (count-1 + 0.000001)
		--local curBlur_y = blurStart_y + (blurEnd_y - blurStart_y ) * i / (count-1 + 0.000001)
		local curBlur_x = exponent( i, count,  expVal,  blurStart_x, blurEnd_x )
		local curBlur_y = exponent( i, count,  expVal,  blurStart_y, blurEnd_y )
		--print( "curBlur_x ", curBlur_x )
		img:Blur(tmpImg, {
			BLUR_Type = filters[filter+1], 
			BLUR_Red = do_r,
			BLUR_Green = do_g,
			BLUR_Blue = do_b,
			BLUR_Alpha = do_a,
			BLUR_XSize = curBlur_x / 720, 
			BLUR_YSize = curBlur_y / 720,
			BLUR_Normalize = 1.0,
			BLUR_Passes = passes,
			BLUR_Blend = 1.0,
		})
		
		--tmpImg = img:Transform(nil, { 
			--XF_XOffset = 0.5 + i*0.005, 
			--XF_YOffset = 0.5, 
			--XF_XAxis = 0.5,
			--XF_YAxis = 0.5,
			--XF_XSize = 1, 
			--XF_YSize = 1, 
			--XF_Angle = 0, 
			--XF_EdgeMode = "Duplicate",
		--})

		r, g, b = interpolate3( i, count, expVal, start_h, start_s, start_v, end_h, end_s, end_v )
		r, g, b = 	hsvToRgb( r, g, b)
		tmpImg = tmpImg:ChannelOpOf("Multiply", nil, { R = r, G = g, B = b, A = 1.0})
		result = result:BlendOf(tmpImg, blendCoeff )
		self:SetProgress((i+1) / count)
	end

	result = img:BlendOf(result, blend)
	--{{{
	--result:MultiProcessPixels(nil, { Gain = 0.0 }, 0,0, img.Width, img.Height, img,	function (x,y, p)
			--p.R = p.R 
			--p.G = 0.0
			--p.B = p.B * Gain
			--return p
		--end)

	--}}}
	OutImage:Set(req, result)
end

function NotifyChanged(inp, param, time)
	if inp == InLockXY then   -- Update our sliders
		local locked = (param.Value > 0.5)
		
		if locked then
			InBlurStartX:SetAttrs({ LINKS_Name = "Minimum Blur" })
			InBlurStartY:SetAttrs({ IC_Visible = false })
			InBlurEndX:SetAttrs({ LINKS_Name = "Maximum Blur" })
			InBlurEndY:SetAttrs({ IC_Visible = false })
		else
			InBlurStartX:SetAttrs({ LINKS_Name = "X Minimum Blur" })
			InBlurStartY:SetAttrs({ IC_Visible = true })
			InBlurEndX:SetAttrs({ LINKS_Name = "X Maximum Blur" })
			InBlurEndY:SetAttrs({ IC_Visible = true })

		end
	elseif inp == InFilter then
	
		InPasses:SetAttrs({ IC_Visible = (param.Value == 3), })
	end
end
